platform/mt6763/mmc_common_inter.c:	struct mmc_host *host = (struct mmc_host*)bdev->priv;
platform/mt6763/mmc_common_inter.c:	struct mmc_host *host = (struct mmc_host*)bdev->priv;
platform/mt6763/mmc_common_inter.c:	if (bdev && bdev->priv) {
platform/mt6763/mmc_common_inter.c:		host = (struct mmc_host*)bdev->priv;
platform/mt6763/mmc_common_inter.c:	if (bdev && bdev->priv) {
platform/mt6763/mmc_common_inter.c:		host = (struct mmc_host*)bdev->priv;
platform/mt6763/mmc_common_inter.c:		bdev->dev         = id;
platform/mt6763/mmc_common_inter.c:		bdev->type        = BOOTDEV_SDMMC;
platform/mt6763/mmc_common_inter.c:		bdev->blksz       = MMC_BLOCK_SIZE;
platform/mt6763/mmc_common_inter.c:			bdev->erasesz = card->ext_csd.hc_erase_grp_sz * 512 * 1024;
platform/mt6763/mmc_common_inter.c:			bdev->erasesz = card->csd.erase_sctsz * 512;
platform/mt6763/mmc_common_inter.c:		bdev->lba         = card->nblks * card->blklen / MMC_BLOCK_SIZE;
platform/mt6763/mmc_common_inter.c:		bdev->blk_bits    = 9;
platform/mt6763/mmc_common_inter.c:		bdev->part_boot1  = EMMC_PART_BOOT1;
platform/mt6763/mmc_common_inter.c:		bdev->part_boot2  = EMMC_PART_BOOT2;
platform/mt6763/mmc_common_inter.c:		bdev->part_user   = EMMC_PART_USER;
platform/mt6763/mmc_common_inter.c:		bdev->block_read  = mmc_wrap_bread;
platform/mt6763/mmc_common_inter.c:		bdev->block_write = mmc_wrap_bwrite;
platform/mt6763/load_image.c:		//g_rcimg_sz = part->start_sect * dev->blkdev->blksz;
platform/mt6763/mmc_core.c:	struct mmc_host *host = (struct mmc_host*)bdev->priv;
platform/mt6763/mmc_core.c:  	uint32_t block_size = bdev->dev.block_size;
platform/mt6763/mmc_core.c:  		ret = mmc_sdhci_read(bdev->mmcdev, (void *)sptr, (data_addr / block_size), (read_size / block_size));
platform/mt6763/mmc_core.c:  		ret = mmc_sdhci_read(bdev->mmcdev, (void *)sptr, (data_addr / block_size), (data_len / block_size));
platform/mt6763/mmc_core.c:  	uint32_t block_size = bdev->dev.block_size;
platform/mt6763/mmc_core.c:  		val = mmc_sdhci_write(bdev->mmcdev, (void *)sptr, (data_addr / block_size), (write_size / block_size));
platform/mt6763/mmc_core.c:  		val = mmc_sdhci_write(bdev->mmcdev, (void *)sptr, (data_addr / block_size), (data_len / block_size));
platform/mt6757/mmc_common_inter.c:	bdev->offset = 0;
platform/mt6757/mmc_common_inter.c:			bdev->offset += size[i];
platform/mt6757/mmc_common_inter.c:		bdev->offset /= bdev->blksz; /* in blksz unit */
platform/mt6757/mmc_common_inter.c:	struct mmc_host *host = (struct mmc_host*)bdev->priv;
platform/mt6757/mmc_common_inter.c:	struct mmc_host *host = (struct mmc_host*)bdev->priv;
platform/mt6757/mmc_common_inter.c:	if (bdev && bdev->priv) {
platform/mt6757/mmc_common_inter.c:		host = (struct mmc_host*)bdev->priv;
platform/mt6757/mmc_common_inter.c:	if (bdev && bdev->priv) {
platform/mt6757/mmc_common_inter.c:		host = (struct mmc_host*)bdev->priv;
platform/mt6757/mmc_common_inter.c:		bdev->dev         = id;
platform/mt6757/mmc_common_inter.c:		bdev->type        = BOOTDEV_SDMMC;
platform/mt6757/mmc_common_inter.c:		bdev->blksz       = MMC_BLOCK_SIZE;
platform/mt6757/mmc_common_inter.c:			bdev->erasesz = card->ext_csd.hc_erase_grp_sz * 512 * 1024;
platform/mt6757/mmc_common_inter.c:			bdev->erasesz = card->csd.erase_sctsz * 512;
platform/mt6757/mmc_common_inter.c:		bdev->lba         = card->nblks * card->blklen / MMC_BLOCK_SIZE;
platform/mt6757/mmc_common_inter.c:		bdev->blk_bits    = 9;
platform/mt6757/mmc_common_inter.c:		bdev->part_boot1  = EMMC_PART_BOOT1;
platform/mt6757/mmc_common_inter.c:		bdev->part_boot2  = EMMC_PART_BOOT2;
platform/mt6757/mmc_common_inter.c:		bdev->part_user   = EMMC_PART_USER;
platform/mt6757/mmc_common_inter.c:		bdev->block_read  = mmc_wrap_bread;
platform/mt6757/mmc_common_inter.c:		bdev->block_write = mmc_wrap_bwrite;
platform/mt6757/load_image.c:		//g_rcimg_sz = part->start_sect * dev->blkdev->blksz;
platform/common/plinfo/plinfo_emmc_ufs.c:	if (dev->blkdev->type == BOOTDEV_SDMMC)
platform/common/plinfo/plinfo_emmc_ufs.c:	else if (dev->blkdev->type == BOOTDEV_UFS)
platform/common/log_store/log_store_lk.c:	blk_sz = dev->blkdev->blksz;
platform/common/log_store/log_store_lk.c:	dev->read(dev, part_offset, (uchar *)prepostfix, blk_sz, part_id);
platform/common/log_store/log_store_lk.c:	dev->read(dev, part_offset, (uchar *)prepostfix, blk_sz);
platform/common/log_store/log_store_lk.c:	dev->read(dev, part_offset, (uchar *)prepostfix, blk_sz, part_id);
platform/common/log_store/log_store_lk.c:	dev->write(dev, (uchar *)prepostfix, part_offset, blk_sz, part_id);
platform/common/log_store/log_store_lk.c:	dev->write(dev, (uchar *)prepostfix, part_offset, blk_sz);
platform/common/log_store/log_store_lk.c:	dev->write(dev, (uchar *)prepostfix, part_offset, blk_sz, part_id);
platform/common/storage/blkdev/nand_generic_inter.c:	int dev_id = dev->id;
platform/common/storage/blkdev/nand_generic_inter.c:	block_dev_desc_t *blkdev = dev->blkdev;
platform/common/storage/blkdev/nand_generic_inter.c:	part_start    = src &  ((u64)blkdev->blksz - 1);
platform/common/storage/blkdev/nand_generic_inter.c:	part_end      = end &  ((u64)blkdev->blksz - 1);
platform/common/storage/blkdev/nand_generic_inter.c:	aligned_start = src & ~((u64)blkdev->blksz - 1);
platform/common/storage/blkdev/nand_generic_inter.c:	aligned_end   = end & ~((u64)blkdev->blksz - 1);
platform/common/storage/blkdev/nand_generic_inter.c:		blknr = (ulong)(aligned_start >> blkdev->blk_bits);
platform/common/storage/blkdev/nand_generic_inter.c:		part_len = (u64)blkdev->blksz - part_start;
platform/common/storage/blkdev/nand_generic_inter.c:		if ((blkdev->block_read(dev_id, blknr, 1, (unsigned long*)buf, part_id))!= 1) {
platform/common/storage/blkdev/nand_generic_inter.c:	aligned_start = src & ~((u64)blkdev->blksz - 1);
platform/common/storage/blkdev/nand_generic_inter.c:	blknr  = (ulong)(aligned_start >> blkdev->blk_bits);
platform/common/storage/blkdev/nand_generic_inter.c:	blkcnt = (ulong)((aligned_end - aligned_start) >> blkdev->blk_bits);
platform/common/storage/blkdev/nand_generic_inter.c:		if ((blkdev->block_read(dev_id, blknr, blkcnt, (unsigned long *)(dst), part_id)) != blkcnt) {
platform/common/storage/blkdev/nand_generic_inter.c:	src += ((u64)blkcnt << blkdev->blk_bits);
platform/common/storage/blkdev/nand_generic_inter.c:	dst += ((u64)blkcnt << blkdev->blk_bits);
platform/common/storage/blkdev/nand_generic_inter.c:		blknr = (ulong)(aligned_end >> blkdev->blk_bits);
platform/common/storage/blkdev/nand_generic_inter.c:		if ((blkdev->block_read(dev_id, blknr, 1, (unsigned long*)buf, part_id)) != 1) {
platform/common/storage/blkdev/nand_generic_inter.c:	int dev_id = dev->id;
platform/common/storage/blkdev/nand_generic_inter.c:	block_dev_desc_t *blkdev = dev->blkdev;
platform/common/storage/blkdev/nand_generic_inter.c:	part_start    = dst &  ((u64)blkdev->blksz - 1);
platform/common/storage/blkdev/nand_generic_inter.c:	part_end      = end &  ((u64)blkdev->blksz - 1);
platform/common/storage/blkdev/nand_generic_inter.c:	aligned_start = dst & ~((u64)blkdev->blksz - 1);
platform/common/storage/blkdev/nand_generic_inter.c:	aligned_end   = end & ~((u64)blkdev->blksz - 1);
platform/common/storage/blkdev/nand_generic_inter.c:		blknr = (ulong)(aligned_start >> blkdev->blk_bits);
platform/common/storage/blkdev/nand_generic_inter.c:		part_len = (u64)blkdev->blksz - part_start;
platform/common/storage/blkdev/nand_generic_inter.c:		if ((blkdev->block_read(dev_id, blknr, 1, (unsigned long*)buf, part_id)) != 1) {
platform/common/storage/blkdev/nand_generic_inter.c:		if ((blkdev->block_write(dev_id, blknr, 1, (unsigned long*)buf, part_id)) != 1) {
platform/common/storage/blkdev/nand_generic_inter.c:	aligned_start = dst & ~((u64)blkdev->blksz - 1);
platform/common/storage/blkdev/nand_generic_inter.c:	blknr  = (ulong)(aligned_start >> blkdev->blk_bits);
platform/common/storage/blkdev/nand_generic_inter.c:	blkcnt = (ulong)((aligned_end - aligned_start) >> blkdev->blk_bits);
platform/common/storage/blkdev/nand_generic_inter.c:	if ((blkdev->block_write(dev_id, blknr, blkcnt, (unsigned long *)(src), part_id)) != blkcnt) {
platform/common/storage/blkdev/nand_generic_inter.c:	src += ((u64)blkcnt << blkdev->blk_bits);
platform/common/storage/blkdev/nand_generic_inter.c:	dst += ((u64)blkcnt << blkdev->blk_bits);
platform/common/storage/blkdev/nand_generic_inter.c:		blknr = (u64)(aligned_end >> blkdev->blk_bits);
platform/common/storage/blkdev/nand_generic_inter.c:		if ((blkdev->block_read(dev_id, blknr, 1, (unsigned long*)buf, part_id)) != 1) {
platform/common/storage/blkdev/nand_generic_inter.c:		if ((blkdev->block_write(dev_id, blknr, 1, (unsigned long*)buf, part_id))!= 1) {
platform/common/storage/blkdev/nand_generic_inter.c:		if (!dev->read) {
platform/common/storage/blkdev/nand_generic_inter.c:			dev->read = mt_part_generic_read;
platform/common/storage/blkdev/nand_generic_inter.c:		if (!dev->write) {
platform/common/storage/blkdev/nand_generic_inter.c:			dev->write = mt_part_generic_write;
platform/common/storage/blkdev/nand_generic_inter.c:	if (mt_part_dev && !mt_part_dev->init && mt_part_dev->init_dev) {
platform/common/storage/blkdev/nand_generic_inter.c:		mt_part_dev->init_dev(mt_part_dev->id);
platform/common/storage/blkdev/nand_generic_inter.c:		mt_part_dev->init = 1;
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:	int dev_id = dev->id;
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:	block_dev_desc_t *blkdev = dev->blkdev;
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:	part_start    = src &  ((u64)blkdev->blksz - 1);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:	part_end      = end &  ((u64)blkdev->blksz - 1);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:	aligned_start = src & ~((u64)blkdev->blksz - 1);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:	aligned_end   = end & ~((u64)blkdev->blksz - 1);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:		blknr = aligned_start >> (blkdev->blk_bits);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:		part_len = blkdev->blksz - part_start;
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:		if ((blkdev->block_read(dev_id, blknr, 1, (unsigned long*)buf, part_id)) != 1) {
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:	aligned_start = src & ~((u64)blkdev->blksz - 1);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:	blknr  = aligned_start >> (blkdev->blk_bits);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:	blkcnt = (aligned_end - aligned_start) >> (blkdev->blk_bits);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:			blkcnt_buf = mt_part_alloc_buffer_align(&buf, blkcnt, blkdev->blksz);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:				if ((blkdev->block_read(dev_id, blknr, blkcnt_buf, (unsigned long *)buf, part_id)) != blkcnt_buf) {
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:				memcpy(dst, buf,  blkcnt_buf * blkdev->blksz);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:				src += (blkcnt_buf << blkdev->blk_bits);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:				dst += (blkcnt_buf << blkdev->blk_bits);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:				if ((blkdev->block_read(dev_id, blknr, blkcnt, (unsigned long *)buf, part_id)) != blkcnt) {
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:				memcpy(dst, buf, blkcnt * blkdev->blksz);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:				src += (blkcnt << blkdev->blk_bits);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:				dst += (blkcnt << blkdev->blk_bits);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:			if ((blkdev->block_read(dev_id, blknr, blkcnt, (unsigned long *)(dst), part_id)) != blkcnt) {
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:			src += (blkcnt << (blkdev->blk_bits));
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:			dst += (blkcnt << (blkdev->blk_bits));
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:		blknr = aligned_end >> (blkdev->blk_bits);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:		if ((blkdev->block_read(dev_id, blknr, 1, (unsigned long*)buf, part_id)) != 1) {
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:	int dev_id = dev->id;
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:	block_dev_desc_t *blkdev = dev->blkdev;
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:	part_start    = dst &  ((u64)blkdev->blksz - 1);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:	part_end      = end &  ((u64)blkdev->blksz - 1);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:	aligned_start = dst & ~((u64)blkdev->blksz - 1);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:	aligned_end   = end & ~((u64)blkdev->blksz - 1);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:		blknr = aligned_start >> (blkdev->blk_bits);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:		part_len = blkdev->blksz - part_start;
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:		if ((blkdev->block_read(dev_id, blknr, 1, (unsigned long*)buf, part_id)) != 1) {
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:		if ((blkdev->block_write(dev_id, blknr, 1, (unsigned long*)buf, part_id)) != 1) {
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:	aligned_start = dst & ~((u64)blkdev->blksz - 1);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:	blknr  = aligned_start >> (blkdev->blk_bits);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:	blkcnt = (aligned_end - aligned_start) >> (blkdev->blk_bits);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:			blkcnt_buf = mt_part_alloc_buffer_align(&buf, blkcnt, blkdev->blksz);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:				memcpy(buf, src, blkcnt_buf * blkdev->blksz);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:				if ((blkdev->block_write(dev_id, blknr, blkcnt_buf, (unsigned long *)buf, part_id)) != blkcnt_buf) {
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:				src += (blkcnt_buf << blkdev->blk_bits);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:				dst += (blkcnt_buf << blkdev->blk_bits);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:				memcpy(buf, src, blkcnt * blkdev->blksz);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:				if ((blkdev->block_write(dev_id, blknr, blkcnt, (unsigned long *)buf, part_id)) != blkcnt) {
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:				src += (blkcnt << blkdev->blk_bits);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:				dst += (blkcnt << blkdev->blk_bits);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:			if ((blkdev->block_write(dev_id, blknr, blkcnt, (unsigned long *)(src), part_id)) != blkcnt) {
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:			src += (blkcnt << blkdev->blk_bits);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:			dst += (blkcnt << blkdev->blk_bits);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:		blknr = aligned_end >> (blkdev->blk_bits);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:		if ((blkdev->block_read(dev_id, blknr, 1, (unsigned long*)buf, part_id)) != 1) {
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:		if ((blkdev->block_write(dev_id, blknr, 1, (unsigned long*)buf, part_id)) != 1) {
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:		if (!dev->read) {
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:			dev->read = mt_part_generic_read;
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:		if (!dev->write) {
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:			dev->write = mt_part_generic_write;
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:		if (!dev->erase) {
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:			dev->erase = mt_part_generic_erase;
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:		mt_part_buf = (uchar*)memalign(PART_BUF_ALIGN_SIZE, dev->blkdev->blksz * 2);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:			dprintf(CRITICAL, "allocate %lu buffer fail!\n", dev->blkdev->blksz * 2);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:	if (mt_part_dev && !mt_part_dev->init && mt_part_dev->init_dev) {
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:		mt_part_dev->init_dev(mt_part_dev->id);
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:		mt_part_dev->init = 1;
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:		return pdev->blkdev->blksz;
platform/common/storage/blkdev/combo_emmc_ufs_generic_inter.c:		return pdev->blkdev->erasesz;
platform/common/storage/blkdev/emmc_generic_inter.c:	int dev_id = dev->id;
platform/common/storage/blkdev/emmc_generic_inter.c:	block_dev_desc_t *blkdev = dev->blkdev;
platform/common/storage/blkdev/emmc_generic_inter.c:	part_start    = src &  ((u64)blkdev->blksz - 1);
platform/common/storage/blkdev/emmc_generic_inter.c:	part_end      = end &  ((u64)blkdev->blksz - 1);
platform/common/storage/blkdev/emmc_generic_inter.c:	aligned_start = src & ~((u64)blkdev->blksz - 1);
platform/common/storage/blkdev/emmc_generic_inter.c:	aligned_end   = end & ~((u64)blkdev->blksz - 1);
platform/common/storage/blkdev/emmc_generic_inter.c:		blknr = aligned_start >> (blkdev->blk_bits);
platform/common/storage/blkdev/emmc_generic_inter.c:		part_len = blkdev->blksz - part_start;
platform/common/storage/blkdev/emmc_generic_inter.c:		if ((blkdev->block_read(dev_id, blknr, 1, (unsigned long*)buf)) != 1) {
platform/common/storage/blkdev/emmc_generic_inter.c:	aligned_start = src & ~((u64)blkdev->blksz - 1);
platform/common/storage/blkdev/emmc_generic_inter.c:	blknr  = aligned_start >> (blkdev->blk_bits);
platform/common/storage/blkdev/emmc_generic_inter.c:	blkcnt = (aligned_end - aligned_start) >> (blkdev->blk_bits);
platform/common/storage/blkdev/emmc_generic_inter.c:			blkcnt_buf = mt_part_alloc_buffer_align(&buf, blkcnt, blkdev->blksz);
platform/common/storage/blkdev/emmc_generic_inter.c:				if ((blkdev->block_read(dev_id, blknr, blkcnt_buf, (unsigned long *)buf)) != blkcnt_buf) {
platform/common/storage/blkdev/emmc_generic_inter.c:				memcpy(dst, buf,  blkcnt_buf * blkdev->blksz);
platform/common/storage/blkdev/emmc_generic_inter.c:				src += (blkcnt_buf << blkdev->blk_bits);
platform/common/storage/blkdev/emmc_generic_inter.c:				dst += (blkcnt_buf << blkdev->blk_bits);
platform/common/storage/blkdev/emmc_generic_inter.c:				if ((blkdev->block_read(dev_id, blknr, blkcnt, (unsigned long *)buf)) != blkcnt) {
platform/common/storage/blkdev/emmc_generic_inter.c:				memcpy(dst, buf, blkcnt * blkdev->blksz);
platform/common/storage/blkdev/emmc_generic_inter.c:				src += (blkcnt << blkdev->blk_bits);
platform/common/storage/blkdev/emmc_generic_inter.c:				dst += (blkcnt << blkdev->blk_bits);
platform/common/storage/blkdev/emmc_generic_inter.c:			if ((blkdev->block_read(dev_id, blknr, blkcnt, (unsigned long *)(dst))) != blkcnt) {
platform/common/storage/blkdev/emmc_generic_inter.c:			src += (blkcnt << (blkdev->blk_bits));
platform/common/storage/blkdev/emmc_generic_inter.c:			dst += (blkcnt << (blkdev->blk_bits));
platform/common/storage/blkdev/emmc_generic_inter.c:		blknr = aligned_end >> (blkdev->blk_bits);
platform/common/storage/blkdev/emmc_generic_inter.c:		if ((blkdev->block_read(dev_id, blknr, 1, (unsigned long*)buf)) != 1) {
platform/common/storage/blkdev/emmc_generic_inter.c:	int dev_id = dev->id;
platform/common/storage/blkdev/emmc_generic_inter.c:	block_dev_desc_t *blkdev = dev->blkdev;
platform/common/storage/blkdev/emmc_generic_inter.c:	part_start    = dst &  ((u64)blkdev->blksz - 1);
platform/common/storage/blkdev/emmc_generic_inter.c:	part_end      = end &  ((u64)blkdev->blksz - 1);
platform/common/storage/blkdev/emmc_generic_inter.c:	aligned_start = dst & ~((u64)blkdev->blksz - 1);
platform/common/storage/blkdev/emmc_generic_inter.c:	aligned_end   = end & ~((u64)blkdev->blksz - 1);
platform/common/storage/blkdev/emmc_generic_inter.c:		blknr = aligned_start >> (blkdev->blk_bits);
platform/common/storage/blkdev/emmc_generic_inter.c:		part_len = blkdev->blksz - part_start;
platform/common/storage/blkdev/emmc_generic_inter.c:		if ((blkdev->block_read(dev_id, blknr, 1, (unsigned long*)buf)) != 1) {
platform/common/storage/blkdev/emmc_generic_inter.c:		if ((blkdev->block_write(dev_id, blknr, 1, (unsigned long*)buf)) != 1) {
platform/common/storage/blkdev/emmc_generic_inter.c:	aligned_start = dst & ~((u64)blkdev->blksz - 1);
platform/common/storage/blkdev/emmc_generic_inter.c:	blknr  = aligned_start >> (blkdev->blk_bits);
platform/common/storage/blkdev/emmc_generic_inter.c:	blkcnt = (aligned_end - aligned_start) >> (blkdev->blk_bits);
platform/common/storage/blkdev/emmc_generic_inter.c:			blkcnt_buf = mt_part_alloc_buffer_align(&buf, blkcnt, blkdev->blksz);
platform/common/storage/blkdev/emmc_generic_inter.c:				memcpy(buf, src, blkcnt_buf * blkdev->blksz);
platform/common/storage/blkdev/emmc_generic_inter.c:				if ((blkdev->block_write(dev_id, blknr, blkcnt_buf, (unsigned long *)buf)) != blkcnt_buf) {
platform/common/storage/blkdev/emmc_generic_inter.c:				src += (blkcnt_buf << blkdev->blk_bits);
platform/common/storage/blkdev/emmc_generic_inter.c:				dst += (blkcnt_buf << blkdev->blk_bits);
platform/common/storage/blkdev/emmc_generic_inter.c:				memcpy(buf, src, blkcnt * blkdev->blksz);
platform/common/storage/blkdev/emmc_generic_inter.c:				if ((blkdev->block_write(dev_id, blknr, blkcnt, (unsigned long *)buf)) != blkcnt) {
platform/common/storage/blkdev/emmc_generic_inter.c:				src += (blkcnt << blkdev->blk_bits);
platform/common/storage/blkdev/emmc_generic_inter.c:				dst += (blkcnt << blkdev->blk_bits);
platform/common/storage/blkdev/emmc_generic_inter.c:			if ((blkdev->block_write(dev_id, blknr, blkcnt, (unsigned long *)(src))) != blkcnt) {
platform/common/storage/blkdev/emmc_generic_inter.c:			src += (blkcnt << blkdev->blk_bits);
platform/common/storage/blkdev/emmc_generic_inter.c:			dst += (blkcnt << blkdev->blk_bits);
platform/common/storage/blkdev/emmc_generic_inter.c:		blknr = aligned_end >> (blkdev->blk_bits);
platform/common/storage/blkdev/emmc_generic_inter.c:		if ((blkdev->block_read(dev_id, blknr, 1, (unsigned long*)buf)) != 1) {
platform/common/storage/blkdev/emmc_generic_inter.c:		if ((blkdev->block_write(dev_id, blknr, 1, (unsigned long*)buf)) != 1) {
platform/common/storage/blkdev/emmc_generic_inter.c:		if (!dev->read) {
platform/common/storage/blkdev/emmc_generic_inter.c:			dev->read = mt_part_generic_read;
platform/common/storage/blkdev/emmc_generic_inter.c:		if (!dev->write) {
platform/common/storage/blkdev/emmc_generic_inter.c:			dev->write = mt_part_generic_write;
platform/common/storage/blkdev/emmc_generic_inter.c:		if (!dev->erase) {
platform/common/storage/blkdev/emmc_generic_inter.c:			dev->erase = mt_part_generic_erase;
platform/common/storage/blkdev/emmc_generic_inter.c:		mt_part_buf = (uchar*)memalign(PART_BUF_ALIGN_SIZE, dev->blkdev->blksz * 2);
platform/common/storage/blkdev/emmc_generic_inter.c:			dprintf(CRITICAL, "allocate %lu buffer fail!\n", dev->blkdev->blksz * 2);
platform/common/storage/blkdev/emmc_generic_inter.c:	if (mt_part_dev && !mt_part_dev->init && mt_part_dev->init_dev) {
platform/common/storage/blkdev/emmc_generic_inter.c:		mt_part_dev->init_dev(mt_part_dev->id);
platform/common/storage/blkdev/emmc_generic_inter.c:		mt_part_dev->init = 1;
platform/common/storage/ufs/ufs_aio_blkdev.c:	bdev->next = NULL;
platform/common/storage/ufs/ufs_aio_blkdev.c:		if (bdev->type == type)
platform/common/storage/ufs/ufs_aio_blkdev.c:		bdev = bdev->next;
platform/common/storage/ufs/ufs_aio_blkdev.c:	return bdev->bread(bdev, blknr, blks, buf, lu);
platform/common/storage/ufs/ufs_aio_blkdev.c:	return bdev->bwrite(bdev, blknr, blks, buf, lu);
platform/common/storage/ufs/ufs_aio_blkdev.c:	u8 *buf = (u8*)bdev->blkbuf;
platform/common/storage/ufs/ufs_aio_blkdev.c:	u32 blksz = bdev->blksz;
platform/common/storage/ufs/ufs_aio_blkdev.c:		if ((bdev->bread(bdev, blknr, 1, buf, lu)) != 0)
platform/common/storage/ufs/ufs_aio_blkdev.c:		if (blks && 0 != bdev->bread(bdev, blknr, blks, dst, lu))
platform/common/storage/ufs/ufs_aio_blkdev.c:		if ((bdev->bread(bdev, blknr, 1, buf, lu)) != 0)
platform/common/storage/ufs/ufs_aio_blkdev.c:	u8 *buf = (u8*)bdev->blkbuf;
platform/common/storage/ufs/ufs_aio_blkdev.c:	u32 blksz = bdev->blksz;
platform/common/storage/ufs/ufs_aio_blkdev.c:		if ((bdev->bread(bdev, blknr, 1, buf, lu)) != 0)
platform/common/storage/ufs/ufs_aio_blkdev.c:		if ((bdev->bwrite(bdev, blknr, 1, buf, lu)) != 0)
platform/common/storage/ufs/ufs_aio_blkdev.c:		if (blks && 0 != bdev->bwrite(bdev, blknr, blks, src, lu))
platform/common/storage/ufs/ufs_aio_blkdev.c:		if ((bdev->bread(bdev, blknr, 1, buf, lu)) != 0)
platform/common/storage/ufs/ufs_aio_blkdev.c:		if ((bdev->bwrite(bdev, blknr, 1, buf, lu)) != 0)
platform/common/storage/ufs/ufs_aio_interface.c:		bdev->dev         = UFS_DEFAULT_HOST_ID;
platform/common/storage/ufs/ufs_aio_interface.c:		bdev->type        = BOOTDEV_UFS;
platform/common/storage/ufs/ufs_aio_interface.c:		bdev->blksz       = UFS_BLOCK_SIZE;
platform/common/storage/ufs/ufs_aio_interface.c:		bdev->blk_bits    = 12;
platform/common/storage/ufs/ufs_aio_interface.c:		bdev->part_boot1  = UFS_LU_BOOT1;
platform/common/storage/ufs/ufs_aio_interface.c:		bdev->part_boot2  = UFS_LU_BOOT2;
platform/common/storage/ufs/ufs_aio_interface.c:		bdev->part_user   = UFS_LU_USER;
platform/common/storage/ufs/ufs_aio_interface.c:		bdev->block_read  = ufs_wrap_bread;
platform/common/storage/ufs/ufs_aio_interface.c:		bdev->block_write = ufs_wrap_bwrite;
platform/common/storage/ufs/ufs_aio_interface.c:	if ((start_addr % bdev->blksz) || (len % bdev->blksz)) {
platform/common/storage/ufs/ufs_aio_interface.c:	end_blk = (u32)((start_addr + len) / (u64)bdev->blksz) - 1;
platform/common/storage/ufs/ufs_aio_interface.c:	start_blk = (u32)(start_addr / (u64)bdev->blksz);
platform/common/storage/ufs/ufs_aio_interface.c:	bdev->type = BLKDEV_UFS;
platform/common/storage/ufs/ufs_aio_interface.c:	bdev->blkbuf = (u8 *)&g_ufs_internal_buf[0];
platform/common/storage/ufs/ufs_aio_interface.c:	bdev->blksz = UFS_BLOCK_SIZE;
platform/common/storage/ufs/ufs_aio_interface.c:	bdev->erasesz = UFS_BLOCK_SIZE;
platform/common/storage/ufs/ufs_aio_interface.c:	bdev->bread = ufs_bread;
platform/common/storage/ufs/ufs_aio_interface.c:	bdev->bwrite = ufs_bwrite;
platform/common/storage/ufs/ufs_aio_interface.c:	//bdev->blks = card->nblks;
platform/common/storage/ufs/ufs_aio_interface.c:	//bdev->priv = NULL;
platform/common/storage/intf/storage_nand_intf.c:	len = dev->read(dev,
platform/common/storage/intf/storage_nand_intf.c:	len = dev->write(dev,
platform/common/storage/intf/storage_nand_intf.c:	if (!dev->blkdev) {
platform/common/storage/intf/storage_nand_intf.c:	return dev->blkdev->blksz;
platform/common/storage/intf/storage_emmc_ufs_intf.c:	len = dev->read(dev,
platform/common/storage/intf/storage_emmc_ufs_intf.c:	len = dev->write(dev,
platform/common/storage/intf/storage_emmc_ufs_intf.c:	ret = dev->erase(0, offset, (uint64_t)size, phys_part);
platform/common/storage/intf/storage_emmc_ufs_intf.c:	if (!dev->blkdev) {
platform/common/storage/intf/storage_emmc_ufs_intf.c:		pal_log_err("[%s]%s: dev->blkdev is NULL\n",
platform/common/storage/intf/storage_emmc_ufs_intf.c:	return dev->blkdev->blksz;
platform/common/storage/mmc/mmc_common_inter.c:	struct mmc_host *host = (struct mmc_host*)bdev->priv;
platform/common/storage/mmc/mmc_common_inter.c:	struct mmc_host *host = (struct mmc_host*)bdev->priv;
platform/common/storage/mmc/mmc_common_inter.c:	if (bdev && bdev->priv) {
platform/common/storage/mmc/mmc_common_inter.c:		host = (struct mmc_host*)bdev->priv;
platform/common/storage/mmc/mmc_common_inter.c:	if (bdev && bdev->priv) {
platform/common/storage/mmc/mmc_common_inter.c:		host = (struct mmc_host*)bdev->priv;
platform/common/storage/mmc/mmc_common_inter.c:	return dev->write(dev, buf, addr, size, partition_get_region_by_name("otp"));
platform/common/storage/mmc/mmc_common_inter.c:	return dev->read(dev, addr, buf, size, partition_get_region_by_name("otp"));
platform/common/storage/mmc/mmc_common_inter.c:		bdev->dev         = id;
platform/common/storage/mmc/mmc_common_inter.c:		bdev->type        = BOOTDEV_SDMMC;
platform/common/storage/mmc/mmc_common_inter.c:		bdev->blksz       = MMC_BLOCK_SIZE;
platform/common/storage/mmc/mmc_common_inter.c:			bdev->erasesz = card->ext_csd.hc_erase_grp_sz * 512 * 1024;
platform/common/storage/mmc/mmc_common_inter.c:			bdev->erasesz = card->csd.erase_sctsz * 512;
platform/common/storage/mmc/mmc_common_inter.c:		bdev->lba         = card->nblks * card->blklen / MMC_BLOCK_SIZE;
platform/common/storage/mmc/mmc_common_inter.c:		bdev->blk_bits    = 9;
platform/common/storage/mmc/mmc_common_inter.c:		bdev->part_boot1  = EMMC_PART_BOOT1;
platform/common/storage/mmc/mmc_common_inter.c:		bdev->part_boot2  = EMMC_PART_BOOT2;
platform/common/storage/mmc/mmc_common_inter.c:		bdev->part_user   = EMMC_PART_USER;
platform/common/storage/mmc/mmc_common_inter.c:		bdev->block_read  = mmc_wrap_bread;
platform/common/storage/mmc/mmc_common_inter.c:		bdev->block_write = mmc_wrap_bwrite;
platform/common/partition/part_emmc_ufs.c:	return (u64)dev->write(dev, data, offset, (int)size, part_id);
platform/common/partition/part_emmc_ufs.c:	return (u64)dev->read(dev, offset, data, (int)size, part_id);
platform/common/partition/part_emmc_ufs.c:	return dev->erase(0, offset, size, part_id);
platform/common/partition/efi.c:	return g_emmc_user_size / dev->blkdev->blksz - 1;
platform/common/partition/efi.c:		bytes = dev->get_part_size(dev, part_id);
platform/common/partition/efi.c:			return bytes / dev->blkdev->blksz - 1;
platform/common/partition/efi.c:	return (last_lba(dev->blkdev->part_user)-get_spgt_partition_lba_size());
platform/common/partition/efi.c:	err = dev->read(dev, lba * dev->blkdev->blksz, buf, (int)size, part_id);
platform/common/partition/efi.c:	err = dev->write(dev, buf, lba * dev->blkdev->blksz, (int)size, part_id);
platform/common/partition/efi.c:	err = read_data(header_buf, part_id, header_lba, dev->blkdev->blksz);
platform/common/partition/efi.c:	num_block_entry = (u64)(dev->blkdev->blksz / header->sizeof_partition_entry);
platform/common/partition/efi.c:	entries_read_size = (u64)((header->num_partition_entries + (num_block_entry -1)) / num_block_entry) * dev->blkdev->blksz;
platform/common/partition/efi.c:	efi_critical("%s user part id = %d\n", TAG, dev->blkdev->part_user);
platform/common/partition/efi.c:		g_part_ptr[i].part_id = dev->blkdev->part_user;
platform/common/partition/efi.c:	part_id = dev->blkdev->part_user;
platform/common/partition/efi.c:	pgpt_header = (u8 *)malloc(dev->blkdev->blksz);
platform/common/partition/efi.c:	memset(pgpt_header, 0, dev->blkdev->blksz);
platform/common/partition/efi.c:	sgpt_header = (u8 *)malloc(dev->blkdev->blksz);
platform/common/partition/efi.c:	memset(sgpt_header, 0, dev->blkdev->blksz);
platform/common/partition/efi.c:	nr_sects = last_lba(dev->blkdev->part_user) + 1;
platform/common/partition/efi.c:	header->alternate_lba = last_lba(dev->blkdev->part_user);
platform/common/partition/efi.c:			entries[i].ending_lba = last_lba(dev->blkdev->part_user) - get_spgt_partition_lba_size() ;
platform/common/partition/efi.c:				entries[i].starting_lba = last_lba(dev->blkdev->part_user) - get_spgt_partition_lba_size() - entries[i].ending_lba + 1;
platform/common/partition/efi.c:				entries[i].ending_lba = last_lba(dev->blkdev->part_user) - get_spgt_partition_lba_size() ;
platform/common/partition/efi.c:	if (sz == (PART_MAX_COUNT*sizeof(gpt_entry)+dev->blkdev->blksz)) {
platform/common/partition/efi.c:		entries = (gpt_entry *)(data + dev->blkdev->blksz);
platform/common/partition/efi.c:	} else if (sz == (PART_MAX_COUNT*sizeof(gpt_entry)+dev->blkdev->blksz * 2)) {
platform/common/partition/efi.c:		header = (gpt_header *)(data + dev->blkdev->blksz);
platform/common/partition/efi.c:		entries = (gpt_entry *)(data + dev->blkdev->blksz * 2);
platform/common/partition/efi.c:		efi_err("[GPT_Update]PGPT size not correct, err(%d), expect: 0x%lx read: 0x%x\n", err, (PART_MAX_COUNT*sizeof(gpt_entry)+dev->blkdev->blksz), sz);
platform/common/partition/efi.c:		mbr = (pmbr *)malloc(dev->blkdev->blksz);
platform/common/partition/efi.c:		memset(mbr, 0, dev->blkdev->blksz);
platform/common/partition/efi.c:	err = write_data(0, (u8 *)mbr, (u64)dev->blkdev->blksz, dev->blkdev->part_user);
platform/common/partition/efi.c:	err = write_data(1, (u8 *)header, (u64)dev->blkdev->blksz, dev->blkdev->part_user);
platform/common/partition/efi.c:	part_entries_cnt_per_block = dev->blkdev->blksz / header->sizeof_partition_entry;
platform/common/partition/efi.c:	pentries_write_size = (u64)((PART_MAX_COUNT + part_entries_cnt_per_block - 1) / part_entries_cnt_per_block) * dev->blkdev->blksz;
platform/common/partition/efi.c:	err = write_data(2, (u8 *)entries, pentries_write_size, dev->blkdev->part_user);
platform/common/partition/efi.c:	if (sz == (PART_MAX_COUNT*sizeof(gpt_entry)+dev->blkdev->blksz)) {
platform/common/partition/efi.c:		entries = (gpt_entry *)(data + dev->blkdev->blksz);
platform/common/partition/efi.c:	} else if (sz == (PART_MAX_COUNT*sizeof(gpt_entry)+dev->blkdev->blksz * 2)) {
platform/common/partition/efi.c:		header = (gpt_header *)(data + dev->blkdev->blksz);
platform/common/partition/efi.c:		entries = (gpt_entry *)(data + dev->blkdev->blksz * 2);
platform/common/partition/efi.c:		efi_err("[GPT_Update]SGPT size not correct, err(%d), expect: 0x%lx read: 0x%x\n", err, (PART_MAX_COUNT*sizeof(gpt_entry)+dev->blkdev->blksz), sz);
platform/common/partition/efi.c:	err = write_data(last_lba(dev->blkdev->part_user), (u8 *)header, (u64)dev->blkdev->blksz, dev->blkdev->part_user);
platform/common/partition/efi.c:	part_entries_cnt_per_block = dev->blkdev->blksz / header->sizeof_partition_entry;
platform/common/partition/efi.c:	pentries_write_size = (u64)((PART_MAX_COUNT + part_entries_cnt_per_block - 1) / part_entries_cnt_per_block) * dev->blkdev->blksz;
platform/common/partition/efi.c:	err = write_data(sentries_start_lba, (u8 *)entries, pentries_write_size, dev->blkdev->part_user);
platform/common/partition/part_common.c:	return (u64)g_partition_all[index].start_sect * dev->blkdev->blksz;
platform/common/partition/part_common.c:	return (u64)g_partition_all[index].nr_sects * dev->blkdev->blksz;
platform/common/partition/part_common.c:	partition->part_id = dev->blkdev->part_user;
platform/common/partition/part_common.c:	if (dev->blkdev->type == BOOTDEV_SDMMC)
platform/common/partition/part_common.c:	else if (dev->blkdev->type == BOOTDEV_UFS)
platform/common/partition/part_common.c:	if (dev->blkdev->type == BOOTDEV_SDMMC)
platform/common/partition/part_common.c:	if (dev->blkdev->type == BOOTDEV_UFS)
platform/common/partition/part_common.c:	if (dev->blkdev->type == BOOTDEV_SDMMC)
platform/common/partition/part_common.c:	if (dev->blkdev->type == BOOTDEV_UFS)
platform/common/partition/part_common.c:	pal_log_info(PART_COMMON_TAG"Part Info.(1blk=%luB):\n", dev->blkdev->blksz);
platform/common/partition/part_common.c:			(u64)g_partition_all[i].start_sect * dev->blkdev->blksz,
platform/common/partition/part_common.c:			(u64)(g_partition_all[i].start_sect + g_partition_all[i].nr_sects) * dev->blkdev->blksz - 1,
platform/common/bootctrl/1.0/bootctrl_api.c:        if (dev->blkdev->type == BOOTDEV_SDMMC)
platform/common/bootctrl/1.0/bootctrl_api.c:        if (dev->blkdev->type == BOOTDEV_UFS)
platform/common/bootctrl/1.0/bootctrl_api.c:        if (dev->blkdev->type == BOOTDEV_SDMMC)
platform/common/bootctrl/1.0/bootctrl_api.c:        if (dev->blkdev->type == BOOTDEV_UFS)
platform/common/bootctrl/1.0/bootctrl_api.c:        if (dev->blkdev->type == BOOTDEV_SDMMC) {
platform/common/bootctrl/2.0/bootctrl_api.c:        if (dev->blkdev->type == BOOTDEV_SDMMC)
platform/common/bootctrl/2.0/bootctrl_api.c:        if (dev->blkdev->type == BOOTDEV_UFS)
platform/common/bootctrl/2.0/bootctrl_api.c:        if (dev->blkdev->type == BOOTDEV_SDMMC)
platform/common/bootctrl/2.0/bootctrl_api.c:        if (dev->blkdev->type == BOOTDEV_UFS)
platform/common/bootctrl/2.0/bootctrl_api.c:        if (dev->blkdev->type == BOOTDEV_SDMMC) {
Binary file build-k63v2_64_bsp/platform/common/storage/intf/storage_emmc_ufs_intf.o matches
Binary file build-k63v2_64_bsp/appsboot.raw matches
build-k63v2_64_bsp/lk.debug.lst:		bdev->dev         = id;
build-k63v2_64_bsp/lk.debug.lst:		bdev->dev         = id;
build-k63v2_64_bsp/lk.debug.lst:		bdev->dev         = id;
build-k63v2_64_bsp/lk.debug.lst:		bdev->lba         = card->nblks * card->blklen / MMC_BLOCK_SIZE;
build-k63v2_64_bsp/lk.debug.lst:		bdev->dev         = id;
build-k63v2_64_bsp/lk.debug.lst:		bdev->dev         = id;
build-k63v2_64_bsp/lk.debug.lst:		bdev->blksz       = MMC_BLOCK_SIZE;
build-k63v2_64_bsp/lk.debug.lst:		bdev->dev         = id;
build-k63v2_64_bsp/lk.debug.lst:		bdev->dev         = id;
build-k63v2_64_bsp/lk.debug.lst:		bdev->dev         = id;
build-k63v2_64_bsp/lk.debug.lst:		bdev->dev         = id;
build-k63v2_64_bsp/lk.debug.lst:		bdev->type        = BOOTDEV_SDMMC;
build-k63v2_64_bsp/lk.debug.lst:			bdev->erasesz = card->ext_csd.hc_erase_grp_sz * 512 * 1024;
build-k63v2_64_bsp/lk.debug.lst:			bdev->erasesz = card->csd.erase_sctsz * 512;
build-k63v2_64_bsp/lk.debug.lst:		bdev->type        = BOOTDEV_SDMMC;
build-k63v2_64_bsp/lk.debug.lst:		bdev->blk_bits    = 9;
build-k63v2_64_bsp/lk.debug.lst:		bdev->block_read  = mmc_wrap_bread;
build-k63v2_64_bsp/lk.debug.lst:			bdev->erasesz = card->ext_csd.hc_erase_grp_sz * 512 * 1024;
build-k63v2_64_bsp/lk.debug.lst:			bdev->erasesz = card->csd.erase_sctsz * 512;
build-k63v2_64_bsp/lk.debug.lst:		bdev->lba         = card->nblks * card->blklen / MMC_BLOCK_SIZE;
build-k63v2_64_bsp/lk.debug.lst:		bdev->block_write = mmc_wrap_bwrite;
build-k63v2_64_bsp/lk.debug.lst:		bdev->dev         = id;
build-k63v2_64_bsp/lk.debug.lst:		bdev->block_read  = mmc_wrap_bread;
build-k63v2_64_bsp/lk.debug.lst:		bdev->blksz       = MMC_BLOCK_SIZE;
build-k63v2_64_bsp/lk.debug.lst:		bdev->lba         = card->nblks * card->blklen / MMC_BLOCK_SIZE;
build-k63v2_64_bsp/lk.debug.lst:		bdev->part_boot1  = EMMC_PART_BOOT1;
build-k63v2_64_bsp/lk.debug.lst:		bdev->part_boot2  = EMMC_PART_BOOT2;
build-k63v2_64_bsp/lk.debug.lst:		bdev->part_user   = EMMC_PART_USER;
build-k63v2_64_bsp/lk.debug.lst:		bdev->block_write = mmc_wrap_bwrite;
build-k63v2_64_bsp/lk.debug.lst:		bdev->block_read  = mmc_wrap_bread;
build-k63v2_64_bsp/lk.debug.lst:		bdev->blk_bits    = 9;
build-k63v2_64_bsp/lk.debug.lst:		bdev->part_boot2  = EMMC_PART_BOOT2;
build-k63v2_64_bsp/lk.debug.lst:		bdev->part_user   = EMMC_PART_USER;
build-k63v2_64_bsp/lk.debug.lst:		bdev->part_boot1  = EMMC_PART_BOOT1;
build-k63v2_64_bsp/lk.debug.lst:	if (dev->blkdev->type == BOOTDEV_SDMMC)
build-k63v2_64_bsp/lk.debug.lst:	if (dev->blkdev->type == BOOTDEV_UFS)
build-k63v2_64_bsp/lk.debug.lst:        video_printf("type %d \n",dev->blkdev->type);
build-k63v2_64_bsp/lk.debug.lst:    bio_initialize_bdev(&bdev->dev, name, card->blklen,partition_get_size(33)/card->blklen);
build-k63v2_64_bsp/lk.debug.lst:	//bio_initialize_bdev(&bdev->dev, name, card->blklen, card->nblks);
build-k63v2_64_bsp/lk.debug.lst:	bdev->mmcdev = dev;
build-k63v2_64_bsp/lk.debug.lst:	bdev->dev.read_block = bdev_read_block_data;
build-k63v2_64_bsp/lk.debug.lst:    //bdev->dev.read = bdev_read_block_data;
build-k63v2_64_bsp/lk.debug.lst:	bdev->dev.write_block = bdev_write_block_data;
build-k63v2_64_bsp/lk.debug.lst:	bio_register_device(&bdev->dev);
build-k63v2_64_bsp/lk.debug.lst:	bdev->dev.write_block = bdev_write_block_data;
build-k63v2_64_bsp/lk.debug.lst:	bdev->mmcdev = dev;
build-k63v2_64_bsp/lk.debug.lst:	bdev->dev.read_block = bdev_read_block_data;
build-k63v2_64_bsp/lk.debug.lst:	bdev->dev.write_block = bdev_write_block_data;
build-k63v2_64_bsp/lk.debug.lst:	bdev->dev.read_block = bdev_read_block_data;
build-k63v2_64_bsp/lk.debug.lst:	bdev->dev.write_block = bdev_write_block_data;
build-k63v2_64_bsp/lk.debug.lst:	bio_register_device(&bdev->dev);
build-k63v2_64_bsp/lk.debug.lst:    //bio_write_block(&bdev->dev, 0, 0, 0xff000);
build-k63v2_64_bsp/lk.debug.lst:    bio_read(&bdev->dev, malloc(512), 0, 512);
build-k63v2_64_bsp/lk.debug.lst:		return partition_read(dev->handle, offset, buf, len) == len;
build-k63v2_64_bsp/lk.debug.lst:		return partition_write(dev->handle, offset, buf, len) == len;
build-k63v2_64_bsp/lk.debug.lst:		return partition_read(dev->handle, offset, buf, len) == len;
build-k63v2_64_bsp/lk.debug.lst:	dev->name = "emmc";
build-k63v2_64_bsp/lk.debug.lst:	dev->handle = fatpart;
build-k63v2_64_bsp/lk.debug.lst:	dev->read = part_device_read;
build-k63v2_64_bsp/lk.debug.lst:	dev->write = part_device_write;
build-k63v2_64_bsp/lk.debug.lst:	dev->read = part_device_read;
build-k63v2_64_bsp/lk.debug.lst:	dev->write = part_device_write;
build-k63v2_64_bsp/lk.debug.lst:	dev->name = "emmc";
build-k63v2_64_bsp/lk.debug.lst:	dev->read = part_device_read;
build-k63v2_64_bsp/lk.debug.lst:	dev->name = "emmc";
build-k63v2_64_bsp/lk.debug.lst:	dev->write = part_device_write;
build-k63v2_64_bsp/lk.debug.lst:	dev->read = part_device_read;
build-k63v2_64_bsp/lk.debug.lst:	dev->write = part_device_write;
build-k63v2_64_bsp/lk.debug.lst:	dev->name = "emmc";
build-k63v2_64_bsp/lk.debug.lst:	dev->handle = ext4part;
build-k63v2_64_bsp/lk.debug.lst:	dev->read = part_device_read;
build-k63v2_64_bsp/lk.debug.lst:	dev->write = part_device_write;
build-k63v2_64_bsp/lk.debug.lst:	dev->read = part_device_read;
build-k63v2_64_bsp/lk.debug.lst:	dev->write = part_device_write;
build-k63v2_64_bsp/lk.debug.lst:	dev->name = "emmc";
build-k63v2_64_bsp/lk.debug.lst:	dev->read = part_device_read;
build-k63v2_64_bsp/lk.debug.lst:	dev->name = "emmc";
build-k63v2_64_bsp/lk.debug.lst:	dev->write = part_device_write;
build-k63v2_64_bsp/lk.debug.lst:	dev->read = part_device_read;
build-k63v2_64_bsp/lk.debug.lst:	dev->write = part_device_write;
build-k63v2_64_bsp/lk.debug.lst:	return dev->read(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->read(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->read(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->read(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->read(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->read(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->read(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->read(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->read(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->read(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->read(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->read(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->read(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->read(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->read(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->read(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->read(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->read(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->read(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->read(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->read(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->write(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->write(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->write(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->write(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->write(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->write(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->write(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->read(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->read(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->write(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->write(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:		voprintf_error("SDCard: MarkEndClusInFAT_sd dumpdev->write failed\n");
build-k63v2_64_bsp/lk.debug.lst:			voprintf_error("SDCard: MarkEndClusInFAT_sd dumpdev->read failed\n");
build-k63v2_64_bsp/lk.debug.lst:	return dev->read(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->write(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->write(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->write(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	return dev->write(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
build-k63v2_64_bsp/lk.debug.lst:	voprintf_info("Output to VFAT Partition %s\n", dumpdev->name);
build-k63v2_64_bsp/lk.debug.lst:	voprintf_info("Output to VFAT Partition %s\n", dumpdev->name);
build-k63v2_64_bsp/lk.debug.lst:	voprintf_info("Output to VFAT Partition %s\n", dumpdev->name);
build-k63v2_64_bsp/lk.debug.lst:		if (!handle->dumpdev->read(handle->dumpdev, ext4_lba_to_block_offset(handle->rlba), (uint8_t *)handle->block_lba, BLKSIZE)) {
build-k63v2_64_bsp/lk.debug.lst:		if (!handle->dumpdev->read(handle->dumpdev, ext4_lba_to_block_offset(handle->rlba), (uint8_t *)handle->block_lba, BLKSIZE)) {
build-k63v2_64_bsp/lk.debug.lst:		if (!handle->dumpdev->read(handle->dumpdev, ext4_lba_to_block_offset(handle->rlba), (uint8_t *)handle->block_lba, BLKSIZE)) {
build-k63v2_64_bsp/lk.debug.lst:		if (!handle->dumpdev->write(handle->dumpdev, ext4_lba_to_block_offset(handle->wlba), handle->data, total)) {
build-k63v2_64_bsp/lk.debug.lst:		if (!handle->dumpdev->write(handle->dumpdev, ext4_lba_to_block_offset(handle->wlba), handle->data, total)) {
build-k63v2_64_bsp/lk.debug.lst:		if (!handle->dumpdev->write(handle->dumpdev, ext4_lba_to_block_offset(handle->wlba), handle->data, total)) {
build-k63v2_64_bsp/lk.debug.lst:		if (!handle->dumpdev->write(handle->dumpdev, ext4_lba_to_block_offset(handle->wlba), handle->data, handle->midx)) {
build-k63v2_64_bsp/lk.debug.lst:	voprintf_info("Output to EXT4 Partition %s\n", mrdump_dev->name);
build-k63v2_64_bsp/lk.debug.lst:	voprintf_info("Output to EXT4 Partition %s\n", mrdump_dev->name);
build-k63v2_64_bsp/lk.debug.lst:	if (!mrdump_dev->read(mrdump_dev, ext4_lba_to_block_offset(mrdump_cb->output_fs_lbaooo), (uint8_t *)InfoLBA, sizeof(InfoLBA))) {
build-k63v2_64_bsp/lk.debug.lst:	if (!handle->dumpdev->write(handle->dumpdev, ext4_lba_to_block_offset(paf_info_lba), (uint8_t *)InfoLBA, sizeof(InfoLBA))) {
build-k63v2_64_bsp/lk.debug.lst:	if (!handle->dumpdev->write(handle->dumpdev, ext4_lba_to_block_offset(paf_info_lba), (uint8_t *)InfoLBA, sizeof(InfoLBA))) {
build-k63v2_64_bsp/lk.debug.lst:	if (!handle->dumpdev->read(handle->dumpdev, ext4_lba_to_block_offset(handle->rlba), (uint8_t *)handle->block_lba, BLKSIZE)) {
build-k63v2_64_bsp/lk.debug.lst:	if (!handle->dumpdev->read(handle->dumpdev, ext4_lba_to_block_offset(handle->rlba), (uint8_t *)handle->block_lba, BLKSIZE)) {
build-k63v2_64_bsp/lk.debug.lst:	if (!handle->dumpdev->write(handle->dumpdev, ext4_lba_to_block_offset(paf_info_lba), (uint8_t *)InfoLBA, sizeof(InfoLBA))) {
build-k63v2_64_bsp/lk.debug.lst:	if (!handle->dumpdev->write(handle->dumpdev, ext4_lba_to_block_offset(paf_info_lba), (uint8_t *)InfoLBA, sizeof(InfoLBA))) {
build-k63v2_64_bsp/lk.debug.lst:	if (!handle->dumpdev->write(handle->dumpdev, ext4_lba_to_block_offset(paf_info_lba), (uint8_t *)InfoLBA, sizeof(InfoLBA))) {
build-k63v2_64_bsp/lk.debug.lst:	dev->write(dev, (uchar *)&cblock_result, part_offset, sizeof(cblock_result), part_id);
build-k63v2_64_bsp/lk.debug.lst:	dev->write(dev, (uchar *)&cblock_result, part_offset, sizeof(cblock_result));
build-k63v2_64_bsp/lk.debug.lst:	dev->write(dev, (uchar *)&cblock_result, part_offset, sizeof(cblock_result), part_id);
build-k63v2_64_bsp/lk.debug.lst:	dev.dev->read(dev.dev, dev.ptn, (unsigned char *)&iheader, sizeof(struct ipanic_header), dev.part_id);
build-k63v2_64_bsp/lk.debug.lst:				dev.dev->read(dev.dev, dev.ptn + iheader.data_hdr[i].offset, (uchar *)(&saved_crc), iheader.data_hdr[i].used, dev.part_id);
build-k63v2_64_bsp/lk.debug.lst:				dev.dev->read(dev.dev, dev.ptn + iheader.data_hdr[i].offset, (uchar *)(&saved_crc), iheader.data_hdr[i].used, dev.part_id);
build-k63v2_64_bsp/lk.debug.lst:				dev.dev->read(dev.dev, dev.ptn + iheader.data_hdr[i].offset, (uchar *)(&saved_crc), iheader.data_hdr[i].used, dev.part_id);
build-k63v2_64_bsp/lk.debug.lst:						dev.dev->read(dev.dev, dev.ptn + iheader.data_hdr[i].offset, temp, iheader.data_hdr[i].used, dev.part_id);
build-k63v2_64_bsp/lk.debug.lst:					dev.dev->read(dev.dev, dev.ptn + iheader.data_hdr[i].offset, temp, iheader.data_hdr[i].used, dev.part_id);
build-k63v2_64_bsp/lk.debug.lst:	size_wrote += dev.dev->write(dev.dev, trunk, dev.ptn + offset, write_sz, dev.part_id);
build-k63v2_64_bsp/lk.debug.lst:	size_wrote += dev.dev->write(dev.dev, trunk, dev.ptn + offset, write_sz, dev.part_id);
build-k63v2_64_bsp/lk.debug.lst:	size_wrote += dev.dev->write(dev.dev, trunk, dev.ptn + offset, write_sz, dev.part_id);
build-k63v2_64_bsp/lk.debug.lst:	dev.dev->read(dev.dev, dev.ptn, (unsigned char *)&iheader, sizeof(struct ipanic_header), dev.part_id);
build-k63v2_64_bsp/lk.debug.lst:	if (!part_dev || !part_dev->blkdev) {
build-k63v2_64_bsp/lk.debug.lst:	panic_header.blksize = part_dev->blkdev->blksz;
build-k63v2_64_bsp/lk.debug.lst:	panic_header.blksize = part_dev->blkdev->blksz;
build-k63v2_64_bsp/lk.debug.lst:	panic_header.blksize = part_dev->blkdev->blksz;
build-k63v2_64_bsp/lk.debug.lst:	LOG("kedump: block size:0x%x\n", part_dev->blkdev->blksz);
build-k63v2_64_bsp/lk.debug.lst:	LOG("kedump: block size:0x%x\n", part_dev->blkdev->blksz);
build-k63v2_64_bsp/lk.debug.lst:	LOG("kedump: block size:0x%x\n", part_dev->blkdev->blksz);
build-k63v2_64_bsp/lk.debug.lst:	LOG("kedump: block size:0x%x\n", part_dev->blkdev->blksz);
build-k63v2_64_bsp/lk.debug.lst:	LOG("kedump: block size:0x%x\n", part_dev->blkdev->blksz);
build-k63v2_64_bsp/lk.debug.lst:	offset = ALIGN(sizeof(panic_header), part_dev->blkdev->blksz);
build-k63v2_64_bsp/lk.debug.lst:	LOG("kedump: block size:0x%x\n", part_dev->blkdev->blksz);
build-k63v2_64_bsp/lk.debug.lst:	offset = ALIGN(sizeof(panic_header), part_dev->blkdev->blksz);
build-k63v2_64_bsp/lk.debug.lst:	offset = ALIGN(sizeof(panic_header), part_dev->blkdev->blksz);
build-k63v2_64_bsp/lk.debug.lst:	offset = ALIGN(sizeof(panic_header), part_dev->blkdev->blksz);
build-k63v2_64_bsp/lk.debug.lst:	dev->write(dev, (uchar *)data, part_offset, len, part_id);
build-k63v2_64_bsp/lk.debug.lst:	dev->write(dev, (uchar *)data, part_offset, len);
build-k63v2_64_bsp/lk.debug.lst:	dev->write(dev, (uchar *)data, part_offset, len, part_id);
build-k63v2_64_bsp/lk.debug.lst:	dev->read(dev, part_offset, (uchar *)data, len, part_id);
build-k63v2_64_bsp/lk.debug.lst:	dev->read(dev, part_offset, (uchar *)data, len);
build-k63v2_64_bsp/lk.debug.lst:	dev->read(dev, part_offset, (uchar *)data, len, part_id);
build-k63v2_64_bsp/lk.debug.lst:	dev->read(dev, part_offset, (uchar *)data, len, part_id);
build-k63v2_64_bsp/lk.debug.lst:	dev->read(dev, part_offset, (uchar *)data, len);
build-k63v2_64_bsp/lk.debug.lst:	dev->read(dev, part_offset, (uchar *)data, len, part_id);
build-k63v2_64_bsp/lk.debug.lst:				if (dev->blkdev->type == BOOTDEV_SDMMC) {
build-k63v2_64_bsp/lk.debug.lst:				if (dev->blkdev->type == BOOTDEV_SDMMC) {
build-k63v2_64_bsp/lk.debug.lst:					if (dev->blkdev->type == BOOTDEV_SDMMC)
build-k63v2_64_bsp/lk.debug.lst:					else if (dev->blkdev->type == BOOTDEV_UFS)
build-k63v2_64_bsp/lk.debug.lst:	return (u64)g_partition_all[index].start_sect * dev->blkdev->blksz;
build-k63v2_64_bsp/lk.debug.lst:	return (u64)g_partition_all[index].nr_sects * dev->blkdev->blksz;
build-k63v2_64_bsp/lk.debug.lst:	partition->part_id = dev->blkdev->part_user;
build-k63v2_64_bsp/lk.debug.lst:	partition->part_id = dev->blkdev->part_user;
build-k63v2_64_bsp/lk.debug.lst:	partition->part_id = dev->blkdev->part_user;
build-k63v2_64_bsp/lk.debug.lst:	if (dev->blkdev->type == BOOTDEV_SDMMC)
build-k63v2_64_bsp/lk.debug.lst:	if (dev->blkdev->type == BOOTDEV_SDMMC)
build-k63v2_64_bsp/lk.debug.lst:	else if (dev->blkdev->type == BOOTDEV_UFS)
build-k63v2_64_bsp/lk.debug.lst:	pal_log_info(PART_COMMON_TAG"Part Info.(1blk=%luB):\n", dev->blkdev->blksz);
build-k63v2_64_bsp/lk.debug.lst:			(u64)g_partition_all[i].start_sect * dev->blkdev->blksz,
build-k63v2_64_bsp/lk.debug.lst:			(u64)(g_partition_all[i].start_sect + g_partition_all[i].nr_sects) * dev->blkdev->blksz - 1,
build-k63v2_64_bsp/lk.debug.lst:	pal_log_info(PART_COMMON_TAG"Part Info.(1blk=%luB):\n", dev->blkdev->blksz);
build-k63v2_64_bsp/lk.debug.lst:	err = dev->read(dev, lba * dev->blkdev->blksz, buf, (int)size, part_id);
build-k63v2_64_bsp/lk.debug.lst:	err = dev->read(dev, lba * dev->blkdev->blksz, buf, (int)size, part_id);
build-k63v2_64_bsp/lk.debug.lst:	err = read_data(header_buf, part_id, header_lba, dev->blkdev->blksz);
build-k63v2_64_bsp/lk.debug.lst:	num_block_entry = (u64)(dev->blkdev->blksz / header->sizeof_partition_entry);
build-k63v2_64_bsp/lk.debug.lst:	num_block_entry = (u64)(dev->blkdev->blksz / header->sizeof_partition_entry);
build-k63v2_64_bsp/lk.debug.lst:	entries_read_size = (u64)((header->num_partition_entries + (num_block_entry -1)) / num_block_entry) * dev->blkdev->blksz;
build-k63v2_64_bsp/lk.debug.lst:	num_block_entry = (u64)(dev->blkdev->blksz / header->sizeof_partition_entry);
build-k63v2_64_bsp/lk.debug.lst:	entries_read_size = (u64)((header->num_partition_entries + (num_block_entry -1)) / num_block_entry) * dev->blkdev->blksz;
build-k63v2_64_bsp/lk.debug.lst:	entries_read_size = (u64)((header->num_partition_entries + (num_block_entry -1)) / num_block_entry) * dev->blkdev->blksz;
build-k63v2_64_bsp/lk.debug.lst:	entries_read_size = (u64)((header->num_partition_entries + (num_block_entry -1)) / num_block_entry) * dev->blkdev->blksz;
build-k63v2_64_bsp/lk.debug.lst:	efi_critical("%s user part id = %d\n", TAG, dev->blkdev->part_user);
build-k63v2_64_bsp/lk.debug.lst:		g_part_ptr[i].part_id = dev->blkdev->part_user;
build-k63v2_64_bsp/lk.debug.lst:		g_part_ptr[i].part_id = dev->blkdev->part_user;
build-k63v2_64_bsp/lk.debug.lst:		g_part_ptr[i].part_id = dev->blkdev->part_user;
build-k63v2_64_bsp/lk.debug.lst:	efi_critical("%s user part id = %d\n", TAG, dev->blkdev->part_user);
build-k63v2_64_bsp/lk.debug.lst:	return g_emmc_user_size / dev->blkdev->blksz - 1;
build-k63v2_64_bsp/lk.debug.lst:	part_id = dev->blkdev->part_user;
build-k63v2_64_bsp/lk.debug.lst:	part_id = dev->blkdev->part_user;
build-k63v2_64_bsp/lk.debug.lst:	part_id = dev->blkdev->part_user;
build-k63v2_64_bsp/lk.debug.lst:	pgpt_header = (u8 *)malloc(dev->blkdev->blksz);
build-k63v2_64_bsp/lk.debug.lst:	memset(pgpt_header, 0, dev->blkdev->blksz);
build-k63v2_64_bsp/lk.debug.lst:	sgpt_header = (u8 *)malloc(dev->blkdev->blksz);
build-k63v2_64_bsp/lk.debug.lst:	memset(sgpt_header, 0, dev->blkdev->blksz);
build-k63v2_64_bsp/lk.debug.lst:	sgpt_header = (u8 *)malloc(dev->blkdev->blksz);
build-k63v2_64_bsp/lk.debug.lst:	return (u64)dev->write(dev, data, offset, (int)size, part_id);
build-k63v2_64_bsp/lk.debug.lst:	return (u64)dev->read(dev, offset, data, (int)size, part_id);
build-k63v2_64_bsp/lk.debug.lst:	return dev->erase(0, offset, size, part_id);
build-k63v2_64_bsp/lk.debug.lst:	if (dev->blkdev->type == BOOTDEV_SDMMC)
build-k63v2_64_bsp/lk.debug.lst:	else if (dev->blkdev->type == BOOTDEV_UFS)
build-k63v2_64_bsp/lk.debug.lst:    return indev->driver.type;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.reset_query = 1;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.reset_query = 1;
build-k63v2_64_bsp/lk.debug.lst:        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
build-k63v2_64_bsp/lk.debug.lst:            indev->proc.types.pointer.last_pressed = NULL;
build-k63v2_64_bsp/lk.debug.lst:    if(indev->driver.type == LV_INDEV_TYPE_KEYPAD || indev->driver.type == LV_INDEV_TYPE_ENCODER) {
build-k63v2_64_bsp/lk.debug.lst:        indev->group = group;
build-k63v2_64_bsp/lk.debug.lst:    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
build-k63v2_64_bsp/lk.debug.lst:    return indev->proc.types.pointer.drag_in_prog == 0 ? false : true;
build-k63v2_64_bsp/lk.debug.lst:    if(indev->proc.reset_query) {
build-k63v2_64_bsp/lk.debug.lst:    if(indev->proc.reset_query) {
build-k63v2_64_bsp/lk.debug.lst:    if(indev->proc.reset_query) {
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.drag_limit_out    = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.act_obj           = NULL;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.long_pr_sent                    = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.act_obj           = NULL;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.reset_query                     = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.reset_query                     = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.reset_query                     = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.last_obj          = NULL;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.pr_timestamp                    = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.longpr_rep_timestamp            = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.drag_sum.x        = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.drag_sum.y        = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.drag_throw_vect.x = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.drag_throw_vect.y = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.gesture_sum.x     = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.gesture_sum.y     = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.drag_limit_out    = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.act_obj           = NULL;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.reset_query                     = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.reset_query                     = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.act_obj           = NULL;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.reset_query                     = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.last_obj          = NULL;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.pr_timestamp                    = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.longpr_rep_timestamp            = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.drag_sum.x        = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.drag_sum.y        = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.drag_throw_vect.x = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.drag_throw_vect.y = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.gesture_sum.x     = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.gesture_sum.y     = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.drag_limit_out    = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.act_obj           = NULL;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.reset_query                     = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.reset_query                     = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.reset_query                     = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.act_obj           = NULL;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.last_obj          = NULL;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.pr_timestamp                    = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.longpr_rep_timestamp            = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.drag_sum.x        = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.drag_sum.y        = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.drag_throw_vect.x = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.drag_throw_vect.y = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.gesture_sum.x     = 0;
build-k63v2_64_bsp/lk.debug.lst:        indev->proc.types.pointer.gesture_sum.y     = 0;
build-k63v2_64_bsp/lk.debug.lst:            indev->proc.types.pointer.last_pressed = NULL;
build-k63v2_64_bsp/lk.debug.lst:        if(indev->proc.types.pointer.last_pressed == obj) {
build-k63v2_64_bsp/lk.debug.lst:        if(indev->group == group && obj == lv_indev_get_obj_act()) {
build-k63v2_64_bsp/lk.debug.lst:            indev->proc.types.pointer.last_pressed = NULL;
build-k63v2_64_bsp/lk.debug.lst:        if(indev->group == group && obj == lv_indev_get_obj_act()) {
build-k63v2_64_bsp/lk.debug.lst:        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
build-k63v2_64_bsp/lk.debug.lst:        if(indev->group == group && obj == lv_indev_get_obj_act()) {
build-k63v2_64_bsp/lk.debug.lst:    _lv_memcpy(&indev->driver, driver, sizeof(lv_indev_drv_t));
build-k63v2_64_bsp/lk.debug.lst:    indev->proc.reset_query = 1;
build-k63v2_64_bsp/lk.debug.lst:    indev->cursor           = NULL;
build-k63v2_64_bsp/lk.debug.lst:    indev->group            = NULL;
build-k63v2_64_bsp/lk.debug.lst:    indev->btn_points       = NULL;
build-k63v2_64_bsp/lk.debug.lst:    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);
build-k63v2_64_bsp/lk.debug.lst:    indev->cursor           = NULL;
build-k63v2_64_bsp/lk.debug.lst:    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);
build-k63v2_64_bsp/lk.debug.lst:    indev->proc.reset_query = 1;
build-k63v2_64_bsp/lk.debug.lst:    indev->group            = NULL;
build-k63v2_64_bsp/lk.debug.lst:    indev->btn_points       = NULL;
build-k63v2_64_bsp/lk.debug.lst:    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);
build-k63v2_64_bsp/lk.debug.lst:    indev->proc.reset_query = 1;
build-k63v2_64_bsp/lk.debug.lst:    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);
build-k63v2_64_bsp/lk.debug.lst:    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);
build-k63v2_64_bsp/lk.debug.lst:    if(indev->driver.type == LV_INDEV_TYPE_POINTER) {
build-k63v2_64_bsp/lk.debug.lst:        data->point.x = indev->proc.types.pointer.act_point.x;
build-k63v2_64_bsp/lk.debug.lst:        data->point.y = indev->proc.types.pointer.act_point.y;
build-k63v2_64_bsp/lk.debug.lst:    else if(indev->driver.type == LV_INDEV_TYPE_KEYPAD) {
build-k63v2_64_bsp/lk.debug.lst:        data->key = indev->proc.types.keypad.last_key;
build-k63v2_64_bsp/lk.debug.lst:    if(indev->driver.read_cb) {
build-k63v2_64_bsp/lk.debug.lst:        cont = indev->driver.read_cb(&indev->driver, data);
build-k63v2_64_bsp/lk.debug.lst:        cont = indev->driver.read_cb(&indev->driver, data);
build-k63v2_64_bsp/lk.debug.lst:        data->point.x = indev->proc.types.pointer.act_point.x;
build-k63v2_64_bsp/lk.debug.lst:        data->point.y = indev->proc.types.pointer.act_point.y;
build-k63v2_64_bsp/lk.debug.lst:    if(indev->driver.read_cb) {
build-k63v2_64_bsp/lk.debug.lst:                    if(indev->proc.long_pr_sent == 0) {
build-k63v2_64_bsp/lk.debug.lst:	block_dev_desc_t *blkdev = dev->blkdev;
build-k63v2_64_bsp/lk.debug.lst:	int dev_id = dev->id;
build-k63v2_64_bsp/lk.debug.lst:	part_start    = dst &  ((u64)blkdev->blksz - 1);
build-k63v2_64_bsp/lk.debug.lst:	part_start    = dst &  ((u64)blkdev->blksz - 1);
build-k63v2_64_bsp/lk.debug.lst:	part_start    = dst &  ((u64)blkdev->blksz - 1);
build-k63v2_64_bsp/lk.debug.lst:	part_start    = dst &  ((u64)blkdev->blksz - 1);
build-k63v2_64_bsp/lk.debug.lst:	aligned_start = dst & ~((u64)blkdev->blksz - 1);
build-k63v2_64_bsp/lk.debug.lst:	part_end      = end &  ((u64)blkdev->blksz - 1);
build-k63v2_64_bsp/lk.debug.lst:	aligned_start = dst & ~((u64)blkdev->blksz - 1);
build-k63v2_64_bsp/lk.debug.lst:	part_end      = end &  ((u64)blkdev->blksz - 1);
build-k63v2_64_bsp/lk.debug.lst:	aligned_end   = end & ~((u64)blkdev->blksz - 1);
build-k63v2_64_bsp/lk.debug.lst:	part_end      = end &  ((u64)blkdev->blksz - 1);
build-k63v2_64_bsp/lk.debug.lst:	aligned_end   = end & ~((u64)blkdev->blksz - 1);
build-k63v2_64_bsp/lk.debug.lst:	aligned_start = dst & ~((u64)blkdev->blksz - 1);
build-k63v2_64_bsp/lk.debug.lst:		blknr = aligned_start >> (blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:		part_len = blkdev->blksz - part_start;
build-k63v2_64_bsp/lk.debug.lst:	aligned_start = dst & ~((u64)blkdev->blksz - 1);
build-k63v2_64_bsp/lk.debug.lst:		blknr = aligned_start >> (blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:		blknr = aligned_start >> (blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:		part_len = blkdev->blksz - part_start;
build-k63v2_64_bsp/lk.debug.lst:		blknr = aligned_start >> (blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:		if ((blkdev->block_read(dev_id, blknr, 1, (unsigned long*)buf, part_id)) != 1) {
build-k63v2_64_bsp/lk.debug.lst:		if ((blkdev->block_read(dev_id, blknr, 1, (unsigned long*)buf, part_id)) != 1) {
build-k63v2_64_bsp/lk.debug.lst:		if ((blkdev->block_write(dev_id, blknr, 1, (unsigned long*)buf, part_id)) != 1) {
build-k63v2_64_bsp/lk.debug.lst:	aligned_start = dst & ~((u64)blkdev->blksz - 1);
build-k63v2_64_bsp/lk.debug.lst:	blknr  = aligned_start >> (blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:	aligned_start = dst & ~((u64)blkdev->blksz - 1);
build-k63v2_64_bsp/lk.debug.lst:	blkcnt = (aligned_end - aligned_start) >> (blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:	blknr  = aligned_start >> (blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:			blkcnt_buf = mt_part_alloc_buffer_align(&buf, blkcnt, blkdev->blksz);
build-k63v2_64_bsp/lk.debug.lst:			blkcnt_buf = mt_part_alloc_buffer_align(&buf, blkcnt, blkdev->blksz);
build-k63v2_64_bsp/lk.debug.lst:				src += (blkcnt_buf << blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:				dst += (blkcnt_buf << blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:				src += (blkcnt_buf << blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:				dst += (blkcnt_buf << blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:				src += (blkcnt_buf << blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:				dst += (blkcnt_buf << blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:				dst += (blkcnt_buf << blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:				memcpy(buf, src, blkcnt_buf * blkdev->blksz);
build-k63v2_64_bsp/lk.debug.lst:				if ((blkdev->block_write(dev_id, blknr, blkcnt_buf, (unsigned long *)buf, part_id)) != blkcnt_buf) {
build-k63v2_64_bsp/lk.debug.lst:				if ((blkdev->block_write(dev_id, blknr, blkcnt_buf, (unsigned long *)buf, part_id)) != blkcnt_buf) {
build-k63v2_64_bsp/lk.debug.lst:		blknr = aligned_end >> (blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:		if ((blkdev->block_read(dev_id, blknr, 1, (unsigned long*)buf, part_id)) != 1) {
build-k63v2_64_bsp/lk.debug.lst:		blknr = aligned_end >> (blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:		if ((blkdev->block_read(dev_id, blknr, 1, (unsigned long*)buf, part_id)) != 1) {
build-k63v2_64_bsp/lk.debug.lst:		blknr = aligned_end >> (blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:		if ((blkdev->block_read(dev_id, blknr, 1, (unsigned long*)buf, part_id)) != 1) {
build-k63v2_64_bsp/lk.debug.lst:		blknr = aligned_end >> (blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:		blknr = aligned_end >> (blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:		if ((blkdev->block_read(dev_id, blknr, 1, (unsigned long*)buf, part_id)) != 1) {
build-k63v2_64_bsp/lk.debug.lst:		blknr = aligned_end >> (blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:		if ((blkdev->block_read(dev_id, blknr, 1, (unsigned long*)buf, part_id)) != 1) {
build-k63v2_64_bsp/lk.debug.lst:		if ((blkdev->block_read(dev_id, blknr, 1, (unsigned long*)buf, part_id)) != 1) {
build-k63v2_64_bsp/lk.debug.lst:		if ((blkdev->block_write(dev_id, blknr, 1, (unsigned long*)buf, part_id)) != 1) {
build-k63v2_64_bsp/lk.debug.lst:			if ((blkdev->block_write(dev_id, blknr, blkcnt, (unsigned long *)(src), part_id)) != blkcnt) {
build-k63v2_64_bsp/lk.debug.lst:			src += (blkcnt << blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:			dst += (blkcnt << blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:				memcpy(buf, src, blkcnt * blkdev->blksz);
build-k63v2_64_bsp/lk.debug.lst:				if ((blkdev->block_write(dev_id, blknr, blkcnt, (unsigned long *)buf, part_id)) != blkcnt) {
build-k63v2_64_bsp/lk.debug.lst:	block_dev_desc_t *blkdev = dev->blkdev;
build-k63v2_64_bsp/lk.debug.lst:	int dev_id = dev->id;
build-k63v2_64_bsp/lk.debug.lst:	part_start    = src &  ((u64)blkdev->blksz - 1);
build-k63v2_64_bsp/lk.debug.lst:	part_start    = src &  ((u64)blkdev->blksz - 1);
build-k63v2_64_bsp/lk.debug.lst:	aligned_start = src & ~((u64)blkdev->blksz - 1);
build-k63v2_64_bsp/lk.debug.lst:	part_start    = src &  ((u64)blkdev->blksz - 1);
build-k63v2_64_bsp/lk.debug.lst:	aligned_start = src & ~((u64)blkdev->blksz - 1);
build-k63v2_64_bsp/lk.debug.lst:	part_start    = src &  ((u64)blkdev->blksz - 1);
build-k63v2_64_bsp/lk.debug.lst:	part_end      = end &  ((u64)blkdev->blksz - 1);
build-k63v2_64_bsp/lk.debug.lst:	part_end      = end &  ((u64)blkdev->blksz - 1);
build-k63v2_64_bsp/lk.debug.lst:	aligned_end   = end & ~((u64)blkdev->blksz - 1);
build-k63v2_64_bsp/lk.debug.lst:		part_len = blkdev->blksz - part_start;
build-k63v2_64_bsp/lk.debug.lst:		part_len = blkdev->blksz - part_start;
build-k63v2_64_bsp/lk.debug.lst:	aligned_start = src & ~((u64)blkdev->blksz - 1);
build-k63v2_64_bsp/lk.debug.lst:		blknr = aligned_start >> (blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:	aligned_start = src & ~((u64)blkdev->blksz - 1);
build-k63v2_64_bsp/lk.debug.lst:		if ((blkdev->block_read(dev_id, blknr, 1, (unsigned long*)buf, part_id)) != 1) {
build-k63v2_64_bsp/lk.debug.lst:	aligned_start = src & ~((u64)blkdev->blksz - 1);
build-k63v2_64_bsp/lk.debug.lst:		if ((blkdev->block_read(dev_id, blknr, 1, (unsigned long*)buf, part_id)) != 1) {
build-k63v2_64_bsp/lk.debug.lst:		blknr = aligned_start >> (blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:		if ((blkdev->block_read(dev_id, blknr, 1, (unsigned long*)buf, part_id)) != 1) {
build-k63v2_64_bsp/lk.debug.lst:		blknr = aligned_start >> (blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:	aligned_start = src & ~((u64)blkdev->blksz - 1);
build-k63v2_64_bsp/lk.debug.lst:		blknr = aligned_start >> (blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:		if ((blkdev->block_read(dev_id, blknr, 1, (unsigned long*)buf, part_id)) != 1) {
build-k63v2_64_bsp/lk.debug.lst:		blknr = aligned_start >> (blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:		if ((blkdev->block_read(dev_id, blknr, 1, (unsigned long*)buf, part_id)) != 1) {
build-k63v2_64_bsp/lk.debug.lst:	aligned_start = src & ~((u64)blkdev->blksz - 1);
build-k63v2_64_bsp/lk.debug.lst:	blknr  = aligned_start >> (blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:	aligned_start = src & ~((u64)blkdev->blksz - 1);
build-k63v2_64_bsp/lk.debug.lst:	blkcnt = (aligned_end - aligned_start) >> (blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:	aligned_start = src & ~((u64)blkdev->blksz - 1);
build-k63v2_64_bsp/lk.debug.lst:	blkcnt = (aligned_end - aligned_start) >> (blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:	blknr  = aligned_start >> (blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:			blkcnt_buf = mt_part_alloc_buffer_align(&buf, blkcnt, blkdev->blksz);
build-k63v2_64_bsp/lk.debug.lst:			blkcnt_buf = mt_part_alloc_buffer_align(&buf, blkcnt, blkdev->blksz);
build-k63v2_64_bsp/lk.debug.lst:				memcpy(dst, buf,  blkcnt_buf * blkdev->blksz);
build-k63v2_64_bsp/lk.debug.lst:				src += (blkcnt_buf << blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:				dst += (blkcnt_buf << blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:				src += (blkcnt_buf << blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:				if ((blkdev->block_read(dev_id, blknr, blkcnt_buf, (unsigned long *)buf, part_id)) != blkcnt_buf) {
build-k63v2_64_bsp/lk.debug.lst:				if ((blkdev->block_read(dev_id, blknr, blkcnt_buf, (unsigned long *)buf, part_id)) != blkcnt_buf) {
build-k63v2_64_bsp/lk.debug.lst:				memcpy(dst, buf,  blkcnt_buf * blkdev->blksz);
build-k63v2_64_bsp/lk.debug.lst:				if ((blkdev->block_read(dev_id, blknr, blkcnt_buf, (unsigned long *)buf, part_id)) != blkcnt_buf) {
build-k63v2_64_bsp/lk.debug.lst:		blknr = aligned_end >> (blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:		if ((blkdev->block_read(dev_id, blknr, 1, (unsigned long*)buf, part_id)) != 1) {
build-k63v2_64_bsp/lk.debug.lst:		blknr = aligned_end >> (blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:		if ((blkdev->block_read(dev_id, blknr, 1, (unsigned long*)buf, part_id)) != 1) {
build-k63v2_64_bsp/lk.debug.lst:		blknr = aligned_end >> (blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:		if ((blkdev->block_read(dev_id, blknr, 1, (unsigned long*)buf, part_id)) != 1) {
build-k63v2_64_bsp/lk.debug.lst:		blknr = aligned_end >> (blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:		blknr = aligned_end >> (blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:		blknr = aligned_end >> (blkdev->blk_bits);
build-k63v2_64_bsp/lk.debug.lst:		if ((blkdev->block_read(dev_id, blknr, 1, (unsigned long*)buf, part_id)) != 1) {
build-k63v2_64_bsp/lk.debug.lst:			if ((blkdev->block_read(dev_id, blknr, blkcnt, (unsigned long *)(dst), part_id)) != blkcnt) {
build-k63v2_64_bsp/lk.debug.lst:			src += (blkcnt << (blkdev->blk_bits));
build-k63v2_64_bsp/lk.debug.lst:			dst += (blkcnt << (blkdev->blk_bits));
build-k63v2_64_bsp/lk.debug.lst:			src += (blkcnt << (blkdev->blk_bits));
build-k63v2_64_bsp/lk.debug.lst:				if ((blkdev->block_read(dev_id, blknr, blkcnt, (unsigned long *)buf, part_id)) != blkcnt) {
build-k63v2_64_bsp/lk.debug.lst:				memcpy(dst, buf, blkcnt * blkdev->blksz);
build-k63v2_64_bsp/lk.debug.lst:		if (!dev->read) {
build-k63v2_64_bsp/lk.debug.lst:		if (!dev->write) {
build-k63v2_64_bsp/lk.debug.lst:		if (!dev->erase) {
build-k63v2_64_bsp/lk.debug.lst:		mt_part_buf = (uchar*)memalign(PART_BUF_ALIGN_SIZE, dev->blkdev->blksz * 2);
build-k63v2_64_bsp/lk.debug.lst:			dev->erase = mt_part_generic_erase;
build-k63v2_64_bsp/lk.debug.lst:			dev->read = mt_part_generic_read;
build-k63v2_64_bsp/lk.debug.lst:			dev->write = mt_part_generic_write;
build-k63v2_64_bsp/lk.debug.lst:			dprintf(CRITICAL, "allocate %lu buffer fail!\n", dev->blkdev->blksz * 2);
build-k63v2_64_bsp/lk.debug.lst:	if (mt_part_dev && !mt_part_dev->init && mt_part_dev->init_dev) {
build-k63v2_64_bsp/lk.debug.lst:		mt_part_dev->init_dev(mt_part_dev->id);
build-k63v2_64_bsp/lk.debug.lst:		mt_part_dev->init = 1;
build-k63v2_64_bsp/lk.debug.lst:		return pdev->blkdev->blksz;
build-k63v2_64_bsp/lk.debug.lst:		return pdev->blkdev->erasesz;
build-k63v2_64_bsp/lk.debug.lst:	len = dev->read(dev,
build-k63v2_64_bsp/lk.debug.lst:	len = dev->read(dev,
build-k63v2_64_bsp/lk.debug.lst:	len = dev->write(dev,
build-k63v2_64_bsp/lk.debug.lst:	len = dev->write(dev,
build-k63v2_64_bsp/lk.debug.lst:	ret = dev->erase(0, offset, (uint64_t)size, phys_part);
build-k63v2_64_bsp/lk.debug.lst:	if (!dev->blkdev) {
build-k63v2_64_bsp/lk.debug.lst:	return dev->blkdev->blksz;
build-k63v2_64_bsp/lk.debug.lst:		pal_log_err("[%s]%s: dev->blkdev is NULL\n",
build-k63v2_64_bsp/lk.debug.lst:	DEBUG_ASSERT(dev->ref > 0);
build-k63v2_64_bsp/lk.debug.lst:	DEBUG_ASSERT(dev->ref > 0);
build-k63v2_64_bsp/lk.debug.lst:	if (offset >= dev->size)
build-k63v2_64_bsp/lk.debug.lst:	if (offset + len > dev->size)
build-k63v2_64_bsp/lk.debug.lst:		len = dev->size - offset;
build-k63v2_64_bsp/lk.debug.lst:    video_printf("bio read dev '%s', buf %p, offset %lld, len %zd\n", dev->name, buf, offset, len);
build-k63v2_64_bsp/lk.debug.lst:		len = dev->size - offset;
build-k63v2_64_bsp/lk.debug.lst:    video_printf("bio read dev '%s', buf %p, offset %lld, len %zd\n", dev->name, buf, offset, len);
build-k63v2_64_bsp/lk.debug.lst:	return dev->read(dev, buf, offset, len);
build-k63v2_64_bsp/lk.debug.lst:	return dev->read(dev, buf, offset, len);
build-k63v2_64_bsp/lk.debug.lst:	video_printf("read blockdev '%s', buf %p, block %d, count %u\n", dev->name, buf, block, count);
build-k63v2_64_bsp/lk.debug.lst:	video_printf("read blockdev '%s', buf %p, block %d, count %u\n", dev->name, buf, block, count);
build-k63v2_64_bsp/lk.debug.lst:	video_printf("read blockdev '%s', buf %p, block %d, count %u\n", dev->name, buf, block, count);
build-k63v2_64_bsp/lk.debug.lst:	DEBUG_ASSERT(dev->ref > 0);
build-k63v2_64_bsp/lk.debug.lst:	if (block > dev->block_count)
build-k63v2_64_bsp/lk.debug.lst:	if (block > dev->block_count)
build-k63v2_64_bsp/lk.debug.lst:	DEBUG_ASSERT(dev->ref > 0);
build-k63v2_64_bsp/lk.debug.lst:	if (block + count > dev->block_count)
build-k63v2_64_bsp/lk.debug.lst:		count = dev->block_count - block;
build-k63v2_64_bsp/lk.debug.lst:	return dev->read_block(dev, buf, block, count);
build-k63v2_64_bsp/lk.debug.lst:	if (block + count > dev->block_count)
build-k63v2_64_bsp/lk.debug.lst:	return dev->read_block(dev, buf, block, count);
build-k63v2_64_bsp/lk.debug.lst:		count = dev->block_count - block;
build-k63v2_64_bsp/lk.debug.lst:	return dev->read_block(dev, buf, block, count);
build-k63v2_64_bsp/lk.debug.lst:	return dev->read_block(dev, buf, block, count);
build-k63v2_64_bsp/lk.debug.lst:	STACKBUF_DMA_ALIGN(temp, dev->block_size); // temporary buffer for partial block transfers
build-k63v2_64_bsp/lk.debug.lst:	block = offset / dev->block_size;
build-k63v2_64_bsp/lk.debug.lst:	STACKBUF_DMA_ALIGN(temp, dev->block_size); // temporary buffer for partial block transfers
build-k63v2_64_bsp/lk.debug.lst:	block = offset / dev->block_size;
build-k63v2_64_bsp/lk.debug.lst:	if ((offset % dev->block_size) != 0) {
build-k63v2_64_bsp/lk.debug.lst:	STACKBUF_DMA_ALIGN(temp, dev->block_size); // temporary buffer for partial block transfers
build-k63v2_64_bsp/lk.debug.lst:	if ((offset % dev->block_size) != 0) {
build-k63v2_64_bsp/lk.debug.lst:		size_t block_offset = offset % dev->block_size;
build-k63v2_64_bsp/lk.debug.lst:		size_t block_offset = offset % dev->block_size;
build-k63v2_64_bsp/lk.debug.lst:		size_t tocopy = MIN(dev->block_size - block_offset, len);
build-k63v2_64_bsp/lk.debug.lst:		size_t tocopy = MIN(dev->block_size - block_offset, len);
build-k63v2_64_bsp/lk.debug.lst:	if (len >= dev->block_size) {
build-k63v2_64_bsp/lk.debug.lst:		size_t block_count = len / dev->block_size;
build-k63v2_64_bsp/lk.debug.lst:		size_t bytes = block_count * dev->block_size;
build-k63v2_64_bsp/lk.debug.lst:		size_t bytes = block_count * dev->block_size;
build-k63v2_64_bsp/lk.debug.lst:	video_printf("dev '%s', buf %p, offset %lld, len %zd\n", dev->name, buf, offset, len);
build-k63v2_64_bsp/lk.debug.lst:	video_printf("dev '%s', buf %p, offset %lld, len %zd\n", dev->name, buf, offset, len);
build-k63v2_64_bsp/lk.debug.lst:	video_printf("dev '%s', buf %p, offset %lld, len %zd\n", dev->name, buf, offset, len);
build-k63v2_64_bsp/lk.debug.lst:	DEBUG_ASSERT(dev->ref > 0);
build-k63v2_64_bsp/lk.debug.lst:	DEBUG_ASSERT(dev->ref > 0);
build-k63v2_64_bsp/lk.debug.lst:	if (offset >= dev->size)
build-k63v2_64_bsp/lk.debug.lst:	if (offset + len > dev->size)
build-k63v2_64_bsp/lk.debug.lst:		len = dev->size - offset;
build-k63v2_64_bsp/lk.debug.lst:	return dev->write(dev, buf, offset, len);
build-k63v2_64_bsp/lk.debug.lst:		len = dev->size - offset;
build-k63v2_64_bsp/lk.debug.lst:	return dev->write(dev, buf, offset, len);
build-k63v2_64_bsp/lk.debug.lst:	return dev->write(dev, buf, offset, len);
build-k63v2_64_bsp/lk.debug.lst:	video_printf("dev '%s', buf %p, block %d, count %u\n", dev->name, buf, block, count);
build-k63v2_64_bsp/lk.debug.lst:	video_printf("dev '%s', buf %p, block %d, count %u\n", dev->name, buf, block, count);
build-k63v2_64_bsp/lk.debug.lst:	video_printf("dev '%s', buf %p, block %d, count %u\n", dev->name, buf, block, count);
build-k63v2_64_bsp/lk.debug.lst:	DEBUG_ASSERT(dev->ref > 0);
build-k63v2_64_bsp/lk.debug.lst:	if (block > dev->block_count)
build-k63v2_64_bsp/lk.debug.lst:	if (block > dev->block_count)
build-k63v2_64_bsp/lk.debug.lst:	DEBUG_ASSERT(dev->ref > 0);
build-k63v2_64_bsp/lk.debug.lst:	if (block + count > dev->block_count)
build-k63v2_64_bsp/lk.debug.lst:		count = dev->block_count - block;
build-k63v2_64_bsp/lk.debug.lst:	return dev->write_block(dev, buf, block, count);
build-k63v2_64_bsp/lk.debug.lst:	if (block + count > dev->block_count)
build-k63v2_64_bsp/lk.debug.lst:	return dev->write_block(dev, buf, block, count);
build-k63v2_64_bsp/lk.debug.lst:		count = dev->block_count - block;
build-k63v2_64_bsp/lk.debug.lst:	return dev->write_block(dev, buf, block, count);
build-k63v2_64_bsp/lk.debug.lst:	return dev->write_block(dev, buf, block, count);
build-k63v2_64_bsp/lk.debug.lst:	STACKBUF_DMA_ALIGN(temp, dev->block_size); // temporary buffer for partial block transfers
build-k63v2_64_bsp/lk.debug.lst:	block = offset / dev->block_size;
build-k63v2_64_bsp/lk.debug.lst:	STACKBUF_DMA_ALIGN(temp, dev->block_size); // temporary buffer for partial block transfers
build-k63v2_64_bsp/lk.debug.lst:	STACKBUF_DMA_ALIGN(temp, dev->block_size); // temporary buffer for partial block transfers
build-k63v2_64_bsp/lk.debug.lst:	block = offset / dev->block_size;
build-k63v2_64_bsp/lk.debug.lst:	if ((offset % dev->block_size) != 0) {
build-k63v2_64_bsp/lk.debug.lst:	STACKBUF_DMA_ALIGN(temp, dev->block_size); // temporary buffer for partial block transfers
build-k63v2_64_bsp/lk.debug.lst:	if ((offset % dev->block_size) != 0) {
build-k63v2_64_bsp/lk.debug.lst:		size_t block_offset = offset % dev->block_size;
build-k63v2_64_bsp/lk.debug.lst:		size_t tocopy = MIN(dev->block_size - block_offset, len);
build-k63v2_64_bsp/lk.debug.lst:		size_t tocopy = MIN(dev->block_size - block_offset, len);
build-k63v2_64_bsp/lk.debug.lst:	if (len >= dev->block_size) {
build-k63v2_64_bsp/lk.debug.lst:		size_t block_count = len / dev->block_size;
build-k63v2_64_bsp/lk.debug.lst:		size_t bytes = block_count * dev->block_size;
build-k63v2_64_bsp/lk.debug.lst:		size_t bytes = block_count * dev->block_size;
build-k63v2_64_bsp/lk.debug.lst:		return dev->ioctl(dev, request, argp);
build-k63v2_64_bsp/lk.debug.lst:	list_clear_node(&dev->node);
build-k63v2_64_bsp/lk.debug.lst:	dev->name = strdup(name);
build-k63v2_64_bsp/lk.debug.lst:	dev->block_size = block_size;
build-k63v2_64_bsp/lk.debug.lst:	dev->block_count = block_count;
build-k63v2_64_bsp/lk.debug.lst:	dev->size = (off_t)block_count * block_size;
build-k63v2_64_bsp/lk.debug.lst:	dev->is_subdev = false;
build-k63v2_64_bsp/lk.debug.lst:	dev->read = bio_default_read;
build-k63v2_64_bsp/lk.debug.lst:	dev->read_block = bio_default_read_block;
build-k63v2_64_bsp/lk.debug.lst:	dev->write = bio_default_write;
build-k63v2_64_bsp/lk.debug.lst:	dev->write_block = bio_default_write_block;
build-k63v2_64_bsp/lk.debug.lst:	dev->name = strdup(name);
build-k63v2_64_bsp/lk.debug.lst:	dev->read = bio_default_read;
build-k63v2_64_bsp/lk.debug.lst:	dev->write = bio_default_write;
build-k63v2_64_bsp/lk.debug.lst:	dev->read_block = bio_default_read_block;
build-k63v2_64_bsp/lk.debug.lst:	dev->write_block = bio_default_write_block;
build-k63v2_64_bsp/lk.debug.lst:	dev->erase = bio_default_erase;
build-k63v2_64_bsp/lk.debug.lst:	dev->name = strdup(name);
build-k63v2_64_bsp/lk.debug.lst:	dev->read = bio_default_read;
build-k63v2_64_bsp/lk.debug.lst:	dev->close = NULL;
build-k63v2_64_bsp/lk.debug.lst:	dev->read_block = bio_default_read_block;
build-k63v2_64_bsp/lk.debug.lst:	dev->erase = bio_default_erase;
build-k63v2_64_bsp/lk.debug.lst:	dev->block_size = block_size;
build-k63v2_64_bsp/lk.debug.lst:	dev->block_count = block_count;
build-k63v2_64_bsp/lk.debug.lst:	dev->size = (off_t)block_count * block_size;
build-k63v2_64_bsp/lk.debug.lst:	dev->ref = 0;
build-k63v2_64_bsp/lk.debug.lst:	dev->label = NULL;
build-k63v2_64_bsp/lk.debug.lst:	dev->is_gpt = false;
build-k63v2_64_bsp/lk.debug.lst:	dev->is_subdev = false;
build-k63v2_64_bsp/lk.debug.lst:	dev->close = NULL;
build-k63v2_64_bsp/lk.debug.lst:	dev->read = bio_default_read;
build-k63v2_64_bsp/lk.debug.lst:	dev->read_block = bio_default_read_block;
build-k63v2_64_bsp/lk.debug.lst:	dev->write = bio_default_write;
build-k63v2_64_bsp/lk.debug.lst:	dev->write_block = bio_default_write_block;
build-k63v2_64_bsp/lk.debug.lst:	dev->erase = bio_default_erase;
build-k63v2_64_bsp/lk.debug.lst:	video_printf(" '%s'\n", dev->name);
build-k63v2_64_bsp/lk.debug.lst:	video_printf(" '%s'\n", dev->name);
build-k63v2_64_bsp/lk.debug.lst:	atomic_add(&dev->ref, 1);
build-k63v2_64_bsp/lk.debug.lst:	list_add_head(&bdevs->list, &dev->node);
Binary file build-k63v2_64_bsp/appsboot.mbn matches
Binary file build-k63v2_64_bsp/lk-no-mtk-header.bin matches
Binary file build-k63v2_64_bsp/lk matches
Binary file build-k63v2_64_bsp/app/mt_boot/aee/kdump_sd.o matches
Binary file build-k63v2_64_bsp/lk.img matches
priv:platform/mt6763/mmc_common_inter.c:	struct mmc_host *host = (struct mmc_host*)bdev->priv;
priv:platform/mt6763/mmc_common_inter.c:	struct mmc_host *host = (struct mmc_host*)bdev->priv;
priv:platform/mt6763/mmc_common_inter.c:	if (bdev && bdev->priv) {
priv:platform/mt6763/mmc_common_inter.c:		host = (struct mmc_host*)bdev->priv;
priv:platform/mt6763/mmc_common_inter.c:	if (bdev && bdev->priv) {
priv:platform/mt6763/mmc_common_inter.c:		host = (struct mmc_host*)bdev->priv;
priv:platform/mt6763/mmc_common_inter.c:		bdev->dev         = id;
priv:platform/mt6763/mmc_common_inter.c:		bdev->type        = BOOTDEV_SDMMC;
priv:platform/mt6763/mmc_common_inter.c:		bdev->blksz       = MMC_BLOCK_SIZE;
priv:platform/mt6763/mmc_common_inter.c:			bdev->erasesz = card->ext_csd.hc_erase_grp_sz * 512 * 1024;
priv:platform/mt6763/mmc_common_inter.c:			bdev->erasesz = card->csd.erase_sctsz * 512;
priv:platform/mt6763/mmc_common_inter.c:		bdev->lba         = card->nblks * card->blklen / MMC_BLOCK_SIZE;
priv:platform/mt6763/mmc_common_inter.c:		bdev->blk_bits    = 9;
priv:platform/mt6763/mmc_common_inter.c:		bdev->part_boot1  = EMMC_PART_BOOT1;
priv:platform/mt6763/mmc_common_inter.c:		bdev->part_boot2  = EMMC_PART_BOOT2;
priv:platform/mt6763/mmc_common_inter.c:		bdev->part_user   = EMMC_PART_USER;
priv:platform/mt6763/mmc_common_inter.c:		bdev->block_read  = mmc_wrap_bread;
priv:platform/mt6763/mmc_common_inter.c:		bdev->block_write = mmc_wrap_bwrite;
priv:platform/mt6763/mmc_core.c:	struct mmc_host *host = (struct mmc_host*)bdev->priv;
priv:platform/mt6763/mmc_core.c:  	uint32_t block_size = bdev->dev.block_size;
priv:platform/mt6763/mmc_core.c:  		ret = mmc_sdhci_read(bdev->mmcdev, (void *)sptr, (data_addr / block_size), (read_size / block_size));
priv:platform/mt6763/mmc_core.c:  		ret = mmc_sdhci_read(bdev->mmcdev, (void *)sptr, (data_addr / block_size), (data_len / block_size));
priv:platform/mt6763/mmc_core.c:  	uint32_t block_size = bdev->dev.block_size;
priv:platform/mt6763/mmc_core.c:  		val = mmc_sdhci_write(bdev->mmcdev, (void *)sptr, (data_addr / block_size), (write_size / block_size));
priv:platform/mt6763/mmc_core.c:  		val = mmc_sdhci_write(bdev->mmcdev, (void *)sptr, (data_addr / block_size), (data_len / block_size));
priv:platform/mt6757/mmc_common_inter.c:	bdev->offset = 0;
priv:platform/mt6757/mmc_common_inter.c:			bdev->offset += size[i];
priv:platform/mt6757/mmc_common_inter.c:		bdev->offset /= bdev->blksz; /* in blksz unit */
priv:platform/mt6757/mmc_common_inter.c:	struct mmc_host *host = (struct mmc_host*)bdev->priv;
priv:platform/mt6757/mmc_common_inter.c:	struct mmc_host *host = (struct mmc_host*)bdev->priv;
priv:platform/mt6757/mmc_common_inter.c:	if (bdev && bdev->priv) {
priv:platform/mt6757/mmc_common_inter.c:		host = (struct mmc_host*)bdev->priv;
priv:platform/mt6757/mmc_common_inter.c:	if (bdev && bdev->priv) {
priv:platform/mt6757/mmc_common_inter.c:		host = (struct mmc_host*)bdev->priv;
priv:platform/mt6757/mmc_common_inter.c:		bdev->dev         = id;
priv:platform/mt6757/mmc_common_inter.c:		bdev->type        = BOOTDEV_SDMMC;
priv:platform/mt6757/mmc_common_inter.c:		bdev->blksz       = MMC_BLOCK_SIZE;
priv:platform/mt6757/mmc_common_inter.c:			bdev->erasesz = card->ext_csd.hc_erase_grp_sz * 512 * 1024;
priv:platform/mt6757/mmc_common_inter.c:			bdev->erasesz = card->csd.erase_sctsz * 512;
priv:platform/mt6757/mmc_common_inter.c:		bdev->lba         = card->nblks * card->blklen / MMC_BLOCK_SIZE;
priv:platform/mt6757/mmc_common_inter.c:		bdev->blk_bits    = 9;
priv:platform/mt6757/mmc_common_inter.c:		bdev->part_boot1  = EMMC_PART_BOOT1;
priv:platform/mt6757/mmc_common_inter.c:		bdev->part_boot2  = EMMC_PART_BOOT2;
priv:platform/mt6757/mmc_common_inter.c:		bdev->part_user   = EMMC_PART_USER;
priv:platform/mt6757/mmc_common_inter.c:		bdev->block_read  = mmc_wrap_bread;
priv:platform/mt6757/mmc_common_inter.c:		bdev->block_write = mmc_wrap_bwrite;
priv:platform/common/storage/ufs/ufs_aio_blkdev.c:	bdev->next = NULL;
priv:platform/common/storage/ufs/ufs_aio_blkdev.c:		if (bdev->type == type)
priv:platform/common/storage/ufs/ufs_aio_blkdev.c:		bdev = bdev->next;
priv:platform/common/storage/ufs/ufs_aio_blkdev.c:	return bdev->bread(bdev, blknr, blks, buf, lu);
priv:platform/common/storage/ufs/ufs_aio_blkdev.c:	return bdev->bwrite(bdev, blknr, blks, buf, lu);
priv:platform/common/storage/ufs/ufs_aio_blkdev.c:	u8 *buf = (u8*)bdev->blkbuf;
priv:platform/common/storage/ufs/ufs_aio_blkdev.c:	u32 blksz = bdev->blksz;
priv:platform/common/storage/ufs/ufs_aio_blkdev.c:		if ((bdev->bread(bdev, blknr, 1, buf, lu)) != 0)
priv:platform/common/storage/ufs/ufs_aio_blkdev.c:		if (blks && 0 != bdev->bread(bdev, blknr, blks, dst, lu))
priv:platform/common/storage/ufs/ufs_aio_blkdev.c:		if ((bdev->bread(bdev, blknr, 1, buf, lu)) != 0)
priv:platform/common/storage/ufs/ufs_aio_blkdev.c:	u8 *buf = (u8*)bdev->blkbuf;
priv:platform/common/storage/ufs/ufs_aio_blkdev.c:	u32 blksz = bdev->blksz;
priv:platform/common/storage/ufs/ufs_aio_blkdev.c:		if ((bdev->bread(bdev, blknr, 1, buf, lu)) != 0)
priv:platform/common/storage/ufs/ufs_aio_blkdev.c:		if ((bdev->bwrite(bdev, blknr, 1, buf, lu)) != 0)
priv:platform/common/storage/ufs/ufs_aio_blkdev.c:		if (blks && 0 != bdev->bwrite(bdev, blknr, blks, src, lu))
priv:platform/common/storage/ufs/ufs_aio_blkdev.c:		if ((bdev->bread(bdev, blknr, 1, buf, lu)) != 0)
priv:platform/common/storage/ufs/ufs_aio_blkdev.c:		if ((bdev->bwrite(bdev, blknr, 1, buf, lu)) != 0)
priv:platform/common/storage/ufs/ufs_aio_interface.c:		bdev->dev         = UFS_DEFAULT_HOST_ID;
priv:platform/common/storage/ufs/ufs_aio_interface.c:		bdev->type        = BOOTDEV_UFS;
priv:platform/common/storage/ufs/ufs_aio_interface.c:		bdev->blksz       = UFS_BLOCK_SIZE;
priv:platform/common/storage/ufs/ufs_aio_interface.c:		bdev->blk_bits    = 12;
priv:platform/common/storage/ufs/ufs_aio_interface.c:		bdev->part_boot1  = UFS_LU_BOOT1;
priv:platform/common/storage/ufs/ufs_aio_interface.c:		bdev->part_boot2  = UFS_LU_BOOT2;
priv:platform/common/storage/ufs/ufs_aio_interface.c:		bdev->part_user   = UFS_LU_USER;
priv:platform/common/storage/ufs/ufs_aio_interface.c:		bdev->block_read  = ufs_wrap_bread;
priv:platform/common/storage/ufs/ufs_aio_interface.c:		bdev->block_write = ufs_wrap_bwrite;
priv:platform/common/storage/ufs/ufs_aio_interface.c:	if ((start_addr % bdev->blksz) || (len % bdev->blksz)) {
priv:platform/common/storage/ufs/ufs_aio_interface.c:	end_blk = (u32)((start_addr + len) / (u64)bdev->blksz) - 1;
priv:platform/common/storage/ufs/ufs_aio_interface.c:	start_blk = (u32)(start_addr / (u64)bdev->blksz);
priv:platform/common/storage/ufs/ufs_aio_interface.c:	bdev->type = BLKDEV_UFS;
priv:platform/common/storage/ufs/ufs_aio_interface.c:	bdev->blkbuf = (u8 *)&g_ufs_internal_buf[0];
priv:platform/common/storage/ufs/ufs_aio_interface.c:	bdev->blksz = UFS_BLOCK_SIZE;
priv:platform/common/storage/ufs/ufs_aio_interface.c:	bdev->erasesz = UFS_BLOCK_SIZE;
priv:platform/common/storage/ufs/ufs_aio_interface.c:	bdev->bread = ufs_bread;
priv:platform/common/storage/ufs/ufs_aio_interface.c:	bdev->bwrite = ufs_bwrite;
priv:platform/common/storage/ufs/ufs_aio_interface.c:	//bdev->blks = card->nblks;
priv:platform/common/storage/ufs/ufs_aio_interface.c:	//bdev->priv = NULL;
priv:platform/common/storage/mmc/mmc_common_inter.c:	struct mmc_host *host = (struct mmc_host*)bdev->priv;
priv:platform/common/storage/mmc/mmc_common_inter.c:	struct mmc_host *host = (struct mmc_host*)bdev->priv;
priv:platform/common/storage/mmc/mmc_common_inter.c:	if (bdev && bdev->priv) {
priv:platform/common/storage/mmc/mmc_common_inter.c:		host = (struct mmc_host*)bdev->priv;
priv:platform/common/storage/mmc/mmc_common_inter.c:	if (bdev && bdev->priv) {
priv:platform/common/storage/mmc/mmc_common_inter.c:		host = (struct mmc_host*)bdev->priv;
priv:platform/common/storage/mmc/mmc_common_inter.c:		bdev->dev         = id;
priv:platform/common/storage/mmc/mmc_common_inter.c:		bdev->type        = BOOTDEV_SDMMC;
priv:platform/common/storage/mmc/mmc_common_inter.c:		bdev->blksz       = MMC_BLOCK_SIZE;
priv:platform/common/storage/mmc/mmc_common_inter.c:			bdev->erasesz = card->ext_csd.hc_erase_grp_sz * 512 * 1024;
priv:platform/common/storage/mmc/mmc_common_inter.c:			bdev->erasesz = card->csd.erase_sctsz * 512;
priv:platform/common/storage/mmc/mmc_common_inter.c:		bdev->lba         = card->nblks * card->blklen / MMC_BLOCK_SIZE;
priv:platform/common/storage/mmc/mmc_common_inter.c:		bdev->blk_bits    = 9;
priv:platform/common/storage/mmc/mmc_common_inter.c:		bdev->part_boot1  = EMMC_PART_BOOT1;
priv:platform/common/storage/mmc/mmc_common_inter.c:		bdev->part_boot2  = EMMC_PART_BOOT2;
priv:platform/common/storage/mmc/mmc_common_inter.c:		bdev->part_user   = EMMC_PART_USER;
priv:platform/common/storage/mmc/mmc_common_inter.c:		bdev->block_read  = mmc_wrap_bread;
priv:platform/common/storage/mmc/mmc_common_inter.c:		bdev->block_write = mmc_wrap_bwrite;
priv:build-k63v2_64_bsp/lk.debug.lst:		bdev->dev         = id;
priv:build-k63v2_64_bsp/lk.debug.lst:		bdev->dev         = id;
priv:build-k63v2_64_bsp/lk.debug.lst:		bdev->dev         = id;
priv:build-k63v2_64_bsp/lk.debug.lst:		bdev->lba         = card->nblks * card->blklen / MMC_BLOCK_SIZE;
priv:build-k63v2_64_bsp/lk.debug.lst:		bdev->dev         = id;
priv:build-k63v2_64_bsp/lk.debug.lst:		bdev->dev         = id;
priv:build-k63v2_64_bsp/lk.debug.lst:		bdev->blksz       = MMC_BLOCK_SIZE;
priv:build-k63v2_64_bsp/lk.debug.lst:		bdev->dev         = id;
priv:build-k63v2_64_bsp/lk.debug.lst:		bdev->dev         = id;
priv:build-k63v2_64_bsp/lk.debug.lst:		bdev->dev         = id;
priv:build-k63v2_64_bsp/lk.debug.lst:		bdev->dev         = id;
priv:build-k63v2_64_bsp/lk.debug.lst:		bdev->type        = BOOTDEV_SDMMC;
priv:build-k63v2_64_bsp/lk.debug.lst:			bdev->erasesz = card->ext_csd.hc_erase_grp_sz * 512 * 1024;
priv:build-k63v2_64_bsp/lk.debug.lst:			bdev->erasesz = card->csd.erase_sctsz * 512;
priv:build-k63v2_64_bsp/lk.debug.lst:		bdev->type        = BOOTDEV_SDMMC;
priv:build-k63v2_64_bsp/lk.debug.lst:		bdev->blk_bits    = 9;
priv:build-k63v2_64_bsp/lk.debug.lst:		bdev->block_read  = mmc_wrap_bread;
priv:build-k63v2_64_bsp/lk.debug.lst:			bdev->erasesz = card->ext_csd.hc_erase_grp_sz * 512 * 1024;
priv:build-k63v2_64_bsp/lk.debug.lst:			bdev->erasesz = card->csd.erase_sctsz * 512;
priv:build-k63v2_64_bsp/lk.debug.lst:		bdev->lba         = card->nblks * card->blklen / MMC_BLOCK_SIZE;
priv:build-k63v2_64_bsp/lk.debug.lst:		bdev->block_write = mmc_wrap_bwrite;
priv:build-k63v2_64_bsp/lk.debug.lst:		bdev->dev         = id;
priv:build-k63v2_64_bsp/lk.debug.lst:		bdev->block_read  = mmc_wrap_bread;
priv:build-k63v2_64_bsp/lk.debug.lst:		bdev->blksz       = MMC_BLOCK_SIZE;
priv:build-k63v2_64_bsp/lk.debug.lst:		bdev->lba         = card->nblks * card->blklen / MMC_BLOCK_SIZE;
priv:build-k63v2_64_bsp/lk.debug.lst:		bdev->part_boot1  = EMMC_PART_BOOT1;
priv:build-k63v2_64_bsp/lk.debug.lst:		bdev->part_boot2  = EMMC_PART_BOOT2;
priv:build-k63v2_64_bsp/lk.debug.lst:		bdev->part_user   = EMMC_PART_USER;
priv:build-k63v2_64_bsp/lk.debug.lst:		bdev->block_write = mmc_wrap_bwrite;
priv:build-k63v2_64_bsp/lk.debug.lst:		bdev->block_read  = mmc_wrap_bread;
priv:build-k63v2_64_bsp/lk.debug.lst:		bdev->blk_bits    = 9;
priv:build-k63v2_64_bsp/lk.debug.lst:		bdev->part_boot2  = EMMC_PART_BOOT2;
priv:build-k63v2_64_bsp/lk.debug.lst:		bdev->part_user   = EMMC_PART_USER;
priv:build-k63v2_64_bsp/lk.debug.lst:		bdev->part_boot1  = EMMC_PART_BOOT1;
priv:build-k63v2_64_bsp/lk.debug.lst:    //partition_read(bdev->handle, block, buf, count);
priv:build-k63v2_64_bsp/lk.debug.lst:	bio_initialize_bdev(&bdev->dev, name, card->blklen, card->nblks);
priv:build-k63v2_64_bsp/lk.debug.lst:	bio_initialize_bdev(&bdev->dev, name, card->blklen, card->nblks);
priv:build-k63v2_64_bsp/lk.debug.lst:	bdev->mmcdev = card;
priv:build-k63v2_64_bsp/lk.debug.lst:	bdev->dev.read_block = bdev_read_block;
priv:build-k63v2_64_bsp/lk.debug.lst:	//bdev->dev.write_block = mmc_sdhci_bdev_write_block;
priv:build-k63v2_64_bsp/lk.debug.lst:	bio_register_device(&bdev->dev);
priv:build-k63v2_64_bsp/lk.debug.lst:	bdev->mmcdev = card;
priv:build-k63v2_64_bsp/lk.debug.lst:	bdev->dev.read_block = bdev_read_block;
priv:build-k63v2_64_bsp/lk.debug.lst:	bio_register_device(&bdev->dev);
priv:app/mt_boot/dualboot.c:    partition_read(bdev->dev.handle, block, buf, count);
priv:app/mt_boot/dualboot.c:	bio_initialize_bdev(&bdev->dev, name, card->blklen, card->nblks);
priv:app/mt_boot/dualboot.c:	bdev->mmcdev = card;
priv:app/mt_boot/dualboot.c:	bdev->dev.read_block = bdev_read_block;
priv:app/mt_boot/dualboot.c:	//bdev->dev.write_block = mmc_sdhci_bdev_write_block;
priv:app/mt_boot/dualboot.c:	bio_register_device(&bdev->dev);
priv:lib/bio/mem.c:	LTRACEF("bdev %s, buf %p, offset %lld, len %zu\n", bdev->name, buf, offset, len);
priv:lib/bio/mem.c:	LTRACEF("bdev %s, buf %p, block %u, count %u\n", bdev->name, buf, block, count);
priv:lib/bio/mem.c:	LTRACEF("bdev %s, buf %p, offset %lld, len %zu\n", bdev->name, buf, offset, len);
priv:lib/bio/mem.c:	LTRACEF("bdev %s, buf %p, block %u, count %u\n", bdev->name, buf, block, count);
priv:lib/bio/subdev.c:	return bio_read(subdev->parent, buf, offset + subdev->offset * subdev->dev.block_size, len);
priv:lib/bio/subdev.c:	return bio_read_block(subdev->parent, buf, block + subdev->offset, count);
priv:lib/bio/subdev.c:	return bio_write(subdev->parent, buf, offset + subdev->offset * subdev->dev.block_size, len);
priv:lib/bio/subdev.c:	return bio_write_block(subdev->parent, buf, block + subdev->offset, count);
priv:lib/bio/subdev.c:	return bio_erase(subdev->parent, offset + subdev->offset * subdev->dev.block_size, len);
priv:lib/bio/subdev.c:	bio_close(subdev->parent);
priv:lib/bio/subdev.c:	subdev->parent = NULL;
target/init.c:	if (dev->blkdev->type == BOOTDEV_SDMMC)
target/init.c:	if (dev->blkdev->type == BOOTDEV_UFS)
dev/pmic/pm8921/pm8921_pwm.c:	rc = dev->write(&pwm_id, 1, PM8921_LPG_BANK_SEL);
dev/pmic/pm8921/pm8921_pwm.c:		rc = dev->write(&pwm_conf->pwm_ctl[i], 1, PM8921_LPG_CTL(i));
dev/pmic/pm8921/pm8921_pwm.c:	rc = dev->read(&reg, 1, PM8921_LPG_BANK_ENABLE);
dev/pmic/pm8921/pm8921_pwm.c:	rc = dev->write(&reg, 1, PM8921_LPG_BANK_ENABLE);
dev/pmic/pm8921/pm8921_pwm.c:	rc = dev->write(&pwm_id, 1, PM8921_LPG_BANK_SEL);
dev/pmic/pm8921/pm8921_pwm.c:	rc = dev->read(&reg, 1, PM8921_LPG_CTL(0));
dev/pmic/pm8921/pm8921_pwm.c:	rc = dev->write(&reg, 1, PM8921_LPG_CTL(0));
dev/pmic/pm8921/pm8921.c:	dev->initialized = 1;
dev/pmic/pm8921/pm8921.c:	rc = dev->read(&reg, 1, addr);
dev/pmic/pm8921/pm8921.c:	rc = dev->write(&reg, 1, addr);
dev/pmic/pm8921/pm8921.c:	ASSERT(dev->initialized);
dev/pmic/pm8921/pm8921.c:	dev->read(&val, 1, PBL_ACCESS_2);
dev/pmic/pm8921/pm8921.c:	dev->write(&val, 1, PBL_ACCESS_2);
dev/pmic/pm8921/pm8921.c:	dev->read(&val, 1, SYS_CONFIG_2);
dev/pmic/pm8921/pm8921.c:	dev->write(&val, 1, SYS_CONFIG_2);
dev/pmic/pm8921/pm8921.c:	ret = dev->write(bank, 6, GPIO_CNTL(gpio));
dev/pmic/pm8921/pm8921.c:	ret = dev->write(&block, 1, IRQ_BLOCK_SEL_USR_ADDR);
dev/pmic/pm8921/pm8921.c:		ret = dev->read(status, 1, IRQ_STATUS_RT_USR_ADDR);
dev/pmic/pm8921/pm8921.c:		ret = dev->write(&val, 1, PM8921_LDO_TEST_REG(ldo_number));
dev/pmic/pm8921/pm8921.c:		ret = dev->write(&val, 1, PM8921_LDO_TEST_REG(ldo_number));
dev/pmic/pm8921/pm8921.c:	ret = dev->write(&val, 1, PM8921_LDO_CTRL_REG(ldo_number));
dev/pmic/pm8921/pm8921.c:	ret = dev->write(&val, 1, PM8921_LED_CNTL_REG(led_num));
dev/pmic/pm8921/pm8921.c:	ret = dev->write(&val, 1, PM8921_DRV_KEYPAD_CNTL_REG);
dev/pmic/pm8921/pm8921.c:	ret = dev->read(&val, 1, PM8921_LVS_TEST_REG(lvs_id));
dev/pmic/pm8921/pm8921.c:	ret = dev->write(&val, 1, PM8921_LVS_CTRL_REG(lvs_id));
dev/pmic/pm8921/pm8921.c:	ret = dev->write(&val, 1, PM8921_MPP_CTRL_REG(mpp_id));
dev/lcm/kd070d5450nha6_rgb_dpi/kd070d5450nha6_rgb_dpi.c:	GPIO_LCD_PWR = of_get_named_gpio(dev->of_node, "gpio_lcd_pwr", 0);
app/mt_boot/dl_commands.c:				if (dev->blkdev->type == BOOTDEV_SDMMC) {
app/mt_boot/dl_commands.c:					if (dev->blkdev->type == BOOTDEV_SDMMC)
app/mt_boot/dl_commands.c:					else if (dev->blkdev->type == BOOTDEV_UFS)
app/mt_boot/lvgl/src/lv_core/lv_obj.c:        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
app/mt_boot/lvgl/src/lv_core/lv_obj.c:        if(indev->proc.types.pointer.last_pressed == obj) {
app/mt_boot/lvgl/src/lv_core/lv_obj.c:            indev->proc.types.pointer.last_pressed = NULL;
app/mt_boot/lvgl/src/lv_core/lv_obj.c:        if(indev->group == group && obj == lv_indev_get_obj_act()) {
app/mt_boot/lvgl/src/lv_core/lv_indev.c:    return indev->driver.type;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:        indev->proc.reset_query = 1;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
app/mt_boot/lvgl/src/lv_core/lv_indev.c:            indev->proc.types.pointer.last_pressed = NULL;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:    indev->proc.long_pr_sent         = 0;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:    indev->proc.longpr_rep_timestamp = lv_tick_get();
app/mt_boot/lvgl/src/lv_core/lv_indev.c:    indev->proc.pr_timestamp         = lv_tick_get();
app/mt_boot/lvgl/src/lv_core/lv_indev.c:    indev->proc.disabled = en ? 0 : 1;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:    if(indev->driver.type != LV_INDEV_TYPE_POINTER) return;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:    indev->cursor = cur_obj;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:    lv_obj_set_parent(indev->cursor, lv_disp_get_layer_sys(indev->driver.disp));
app/mt_boot/lvgl/src/lv_core/lv_indev.c:    lv_obj_set_pos(indev->cursor, indev->proc.types.pointer.act_point.x, indev->proc.types.pointer.act_point.y);
app/mt_boot/lvgl/src/lv_core/lv_indev.c:    if(indev->driver.type == LV_INDEV_TYPE_KEYPAD || indev->driver.type == LV_INDEV_TYPE_ENCODER) {
app/mt_boot/lvgl/src/lv_core/lv_indev.c:        indev->group = group;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:    if(indev->driver.type == LV_INDEV_TYPE_BUTTON) {
app/mt_boot/lvgl/src/lv_core/lv_indev.c:        indev->btn_points = points;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
app/mt_boot/lvgl/src/lv_core/lv_indev.c:        point->x = indev->proc.types.pointer.act_point.x;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:        point->y = indev->proc.types.pointer.act_point.y;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:    return indev->proc.types.pointer.gesture_dir;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:    if(indev->driver.type != LV_INDEV_TYPE_KEYPAD)
app/mt_boot/lvgl/src/lv_core/lv_indev.c:        return indev->proc.types.keypad.last_key;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:    return indev->proc.types.pointer.drag_in_prog == 0 ? false : true;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
app/mt_boot/lvgl/src/lv_core/lv_indev.c:        point->x = indev->proc.types.pointer.vect.x;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:        point->y = indev->proc.types.pointer.vect.y;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:    if(indev->driver.type != LV_INDEV_TYPE_POINTER) return LV_RES_OK;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:    if(indev->proc.types.pointer.drag_in_prog == 0) return LV_RES_OK;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:    indev->proc.types.pointer.drag_in_prog = 0;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:    indev->proc.types.pointer.drag_throw_vect.x = 0;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:    indev->proc.types.pointer.drag_throw_vect.y = 0;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:    drag_obj = get_dragged_obj(indev->proc.types.pointer.act_obj);
app/mt_boot/lvgl/src/lv_core/lv_indev.c:    indev->proc.wait_until_release = 1;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:    return indev->refr_task;
app/mt_boot/lvgl/src/lv_core/lv_indev.c: * Process new points from a input device. indev->state.pressed has to be set
app/mt_boot/lvgl/src/lv_core/lv_indev.c:    if(indev->proc.reset_query) {
app/mt_boot/lvgl/src/lv_core/lv_indev.c:        indev->proc.types.pointer.act_obj           = NULL;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:        indev->proc.types.pointer.last_obj          = NULL;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:        indev->proc.types.pointer.drag_limit_out    = 0;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:        indev->proc.types.pointer.drag_in_prog      = 0;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:        indev->proc.long_pr_sent                    = 0;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:        indev->proc.pr_timestamp                    = 0;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:        indev->proc.longpr_rep_timestamp            = 0;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:        indev->proc.types.pointer.drag_sum.x        = 0;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:        indev->proc.types.pointer.drag_sum.y        = 0;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:        indev->proc.types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:        indev->proc.types.pointer.drag_throw_vect.x = 0;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:        indev->proc.types.pointer.drag_throw_vect.y = 0;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:        indev->proc.types.pointer.gesture_sum.x     = 0;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:        indev->proc.types.pointer.gesture_sum.y     = 0;
app/mt_boot/lvgl/src/lv_core/lv_indev.c:        indev->proc.reset_query                     = 0;
app/mt_boot/lvgl/src/lv_hal/lv_hal_disp.c:        if(indev->driver.disp == disp) {
app/mt_boot/lvgl/src/lv_hal/lv_hal_disp.c:            indev->driver.disp = NULL;
app/mt_boot/lvgl/src/lv_hal/lv_hal_indev.c:    _lv_memcpy(&indev->driver, driver, sizeof(lv_indev_drv_t));
app/mt_boot/lvgl/src/lv_hal/lv_hal_indev.c:    indev->proc.reset_query = 1;
app/mt_boot/lvgl/src/lv_hal/lv_hal_indev.c:    indev->cursor           = NULL;
app/mt_boot/lvgl/src/lv_hal/lv_hal_indev.c:    indev->group            = NULL;
app/mt_boot/lvgl/src/lv_hal/lv_hal_indev.c:    indev->btn_points       = NULL;
app/mt_boot/lvgl/src/lv_hal/lv_hal_indev.c:    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);
app/mt_boot/lvgl/src/lv_hal/lv_hal_indev.c:    memcpy(&indev->driver, new_drv, sizeof(lv_indev_drv_t));
app/mt_boot/lvgl/src/lv_hal/lv_hal_indev.c:    if(indev->driver.type == LV_INDEV_TYPE_POINTER) {
app/mt_boot/lvgl/src/lv_hal/lv_hal_indev.c:        data->point.x = indev->proc.types.pointer.act_point.x;
app/mt_boot/lvgl/src/lv_hal/lv_hal_indev.c:        data->point.y = indev->proc.types.pointer.act_point.y;
app/mt_boot/lvgl/src/lv_hal/lv_hal_indev.c:    else if(indev->driver.type == LV_INDEV_TYPE_KEYPAD) {
app/mt_boot/lvgl/src/lv_hal/lv_hal_indev.c:        data->key = indev->proc.types.keypad.last_key;
app/mt_boot/lvgl/src/lv_hal/lv_hal_indev.c:    if(indev->driver.read_cb) {
app/mt_boot/lvgl/src/lv_hal/lv_hal_indev.c:        cont = indev->driver.read_cb(&indev->driver, data);
app/mt_boot/lvgl/src/lv_widgets/lv_tileview.c:            if(!ext->drag_top_en && y > -(ext->act_id.y * h) && indev->proc.types.pointer.vect.y > 0)  {
app/mt_boot/lvgl/src/lv_widgets/lv_tileview.c:            if(!ext->drag_bottom_en && indev->proc.types.pointer.vect.y < 0 && y < -(ext->act_id.y * h)) {
app/mt_boot/lvgl/src/lv_widgets/lv_tileview.c:            if(!ext->drag_left_en && x > -(ext->act_id.x * w) && indev->proc.types.pointer.vect.x > 0) {
app/mt_boot/lvgl/src/lv_widgets/lv_tileview.c:            if(!ext->drag_right_en && indev->proc.types.pointer.vect.x < 0 && x < -(ext->act_id.x * w)) {
app/mt_boot/lvgl/src/lv_widgets/lv_tileview.c:            lv_drag_dir_t drag_dir = indev->proc.types.pointer.drag_dir;
app/mt_boot/lvgl/src/lv_widgets/lv_tileview.c:    lv_drag_dir_t drag_dir = indev->proc.types.pointer.drag_dir;
app/mt_boot/lvgl/src/lv_widgets/lv_page.c:            lv_point_t * drag_sum = &indev->proc.types.pointer.drag_sum;
app/mt_boot/lvgl/src/lv_widgets/lv_cpicker.c:        if((LV_MATH_ABS(p.x - ext->last_press_point.x) > indev->driver.drag_limit / 2) ||
app/mt_boot/lvgl/src/lv_widgets/lv_cpicker.c:           (LV_MATH_ABS(p.y - ext->last_press_point.y) > indev->driver.drag_limit / 2)) {
app/mt_boot/lvgl/src/lv_widgets/lv_cpicker.c:            if(diff > (uint32_t)indev->driver.long_press_time * 2 && !ext->color_mode_fixed) {
app/mt_boot/lvgl/src/lv_widgets/lv_cpicker.c:            if(!on_ring && diff > indev->driver.long_press_time && !ext->color_mode_fixed) {
app/mt_boot/lvgl/src/lv_widgets/lv_cpicker.c:    if(lv_tick_elaps(ext->last_click_time) < indev->driver.long_press_time) {
app/mt_boot/lvgl/src/lv_widgets/lv_list.c:                    if(indev->proc.long_pr_sent == 0) {
app/mt_boot/dualboot.c:        video_printf("type %d \n",dev->blkdev->type);
app/mt_boot/dualboot.c:    bio_initialize_bdev(&bdev->dev, name, card->blklen,partition_get_size(33)/card->blklen);
app/mt_boot/dualboot.c:	//bio_initialize_bdev(&bdev->dev, name, card->blklen, card->nblks);
app/mt_boot/dualboot.c:	bdev->mmcdev = dev;
app/mt_boot/dualboot.c:	bdev->dev.read_block = bdev_read_block_data;
app/mt_boot/dualboot.c:    //bdev->dev.read = bdev_read_block_data;
app/mt_boot/dualboot.c:	bdev->dev.write_block = bdev_write_block_data;
app/mt_boot/dualboot.c:	bio_register_device(&bdev->dev);
app/mt_boot/dualboot.c:    //bio_write_block(&bdev->dev, 0, 0, 0xff000);
app/mt_boot/dualboot.c:    bio_read(&bdev->dev, malloc(512), 0, 512);
app/mt_boot/aee/KEDump.c:	size_wrote += dev.dev->write(dev.dev, trunk, dev.ptn + offset, write_sz, dev.part_id);
app/mt_boot/aee/KEDump.c:	size_wrote += dev.dev->write(dev.dev, trunk, dev.ptn + offset, write_sz);
app/mt_boot/aee/KEDump.c:	size_wrote += dev.dev->write(dev.dev, trunk, (unsigned long)dev.ptn + offset, write_sz);
app/mt_boot/aee/KEDump.c:	if (!part_dev || !part_dev->blkdev) {
app/mt_boot/aee/KEDump.c:	panic_header.blksize = part_dev->blkdev->blksz;
app/mt_boot/aee/KEDump.c:	LOG("kedump: block size:0x%x\n", part_dev->blkdev->blksz);
app/mt_boot/aee/KEDump.c:	offset = ALIGN(sizeof(panic_header), part_dev->blkdev->blksz);
app/mt_boot/aee/KEDump.c:	unsigned long long size_wrote = dev.dev->write(dev.dev, mem_expdb, (unsigned long)dev.ptn, MEM_EXPDB_SIZE/*dev.part_size*/, dev.part_id);
app/mt_boot/aee/KEDump.c:	dev.dev->read(dev.dev, dev.ptn, (unsigned char *)&iheader, sizeof(struct ipanic_header), dev.part_id);
app/mt_boot/aee/KEDump.c:				dev.dev->read(dev.dev, dev.ptn + iheader.data_hdr[i].offset, (uchar *)(&saved_crc), iheader.data_hdr[i].used, dev.part_id);
app/mt_boot/aee/KEDump.c:						//dev.dev->read(dev.dev, dev.ptn + iheader.data_hdr[i].offset, (uchar *)addr_misc, iheader.data_hdr[i].used, dev.part_id);
app/mt_boot/aee/KEDump.c:						dev.dev->read(dev.dev, dev.ptn + iheader.data_hdr[i].offset, temp, iheader.data_hdr[i].used, dev.part_id);
app/mt_boot/aee/KEDump.c:					//dev.dev->read(dev.dev, dev.ptn + iheader.data_hdr[i].offset, (uchar *)PSTORE_ADDR, iheader.data_hdr[i].used, dev.part_id);
app/mt_boot/aee/KEDump.c:					dev.dev->read(dev.dev, dev.ptn + iheader.data_hdr[i].offset, temp, iheader.data_hdr[i].used, dev.part_id);
app/mt_boot/aee/KEDump.c:	dev.dev->read(dev.dev, dev.ptn, (unsigned char *)&iheader, sizeof(struct ipanic_header), dev.part_id);
app/mt_boot/aee/aee.c:	dev->write(dev, (uchar *)&cblock_result, part_offset, sizeof(cblock_result), part_id);
app/mt_boot/aee/aee.c:	dev->write(dev, (uchar *)&cblock_result, part_offset, sizeof(cblock_result));
app/mt_boot/aee/aee.c:	dev->write(dev, (uchar *)&cblock_result, part_offset, sizeof(cblock_result), part_id);
app/mt_boot/aee/platform_debug.c:	dev->write(dev, (uchar *)data, part_offset, len, part_id);
app/mt_boot/aee/platform_debug.c:	dev->write(dev, (uchar *)data, part_offset, len);
app/mt_boot/aee/platform_debug.c:	dev->write(dev, (uchar *)data, part_offset, len, part_id);
app/mt_boot/aee/platform_debug.c:	dev->read(dev, part_offset, (uchar *)data, len, part_id);
app/mt_boot/aee/platform_debug.c:	dev->read(dev, part_offset, (uchar *)data, len);
app/mt_boot/aee/platform_debug.c:	dev->read(dev, part_offset, (uchar *)data, len, part_id);
app/mt_boot/aee/platform_debug.c:	dev->read(dev, part_offset, (uchar *)data, len, part_id);
app/mt_boot/aee/platform_debug.c:	dev->read(dev, part_offset, (uchar *)data, len);
app/mt_boot/aee/platform_debug.c:	dev->read(dev, part_offset, (uchar *)data, len, part_id);
app/mt_boot/aee/kdump_sd.c:	return dev->read(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
app/mt_boot/aee/kdump_sd.c:	return dev->write(dev, sector_addr * DEVICE_SECTOR_BYTES, pdBuf, blockLen * DEVICE_SECTOR_BYTES);
app/mt_boot/aee/kdump_sd.c:			voprintf_error("SDCard: MarkEndClusInFAT_sd dumpdev->read failed\n");
app/mt_boot/aee/kdump_sd.c:		voprintf_error("SDCard: MarkEndClusInFAT_sd dumpdev->write failed\n");
app/mt_boot/aee/kdump_sd.c:	voprintf_info("Output to VFAT Partition %s\n", dumpdev->name);
app/mt_boot/aee/kdump_sdhc.h:	return dev->read(dev, sector_addr, pdBuf, blockLen);
app/mt_boot/aee/kdump_sdhc.h:	return dev->write(dev, sector_addr, pdBuf, blockLen);
app/mt_boot/aee/mrdump_sddev.c:		return partition_read(dev->handle, offset, buf, len) == len;
app/mt_boot/aee/mrdump_sddev.c:		return partition_write(dev->handle, offset, buf, len) == len;
app/mt_boot/aee/mrdump_sddev.c:	dev->name = "emmc";
app/mt_boot/aee/mrdump_sddev.c:	dev->handle = fatpart;
app/mt_boot/aee/mrdump_sddev.c:	dev->read = part_device_read;
app/mt_boot/aee/mrdump_sddev.c:	dev->write = part_device_write;
app/mt_boot/aee/mrdump_sddev.c:	dev->name = "emmc";
app/mt_boot/aee/mrdump_sddev.c:	dev->handle = ext4part;
app/mt_boot/aee/mrdump_sddev.c:	dev->read = part_device_read;
app/mt_boot/aee/mrdump_sddev.c:	dev->write = part_device_write;
app/mt_boot/aee/mrdump_sddev.c:	dev->name = "sdcard";
app/mt_boot/aee/mrdump_sddev.c:	dev->handle = NULL;
app/mt_boot/aee/mrdump_sddev.c:	dev->read = mrdump_dev_sdcard_read;
app/mt_boot/aee/mrdump_sddev.c:	dev->write = mrdump_dev_sdcard_write;
app/mt_boot/aee/kdump_ext4.c:	if (!handle->dumpdev->read(handle->dumpdev, ext4_lba_to_block_offset(lba), (uint8_t *)&bdata, BLKSIZE)) {
app/mt_boot/aee/kdump_ext4.c:		if (!handle->dumpdev->read(handle->dumpdev, ext4_lba_to_block_offset(handle->rlba), (uint8_t *)handle->block_lba, BLKSIZE)) {
app/mt_boot/aee/kdump_ext4.c:		if (!handle->dumpdev->write(handle->dumpdev, ext4_lba_to_block_offset(handle->wlba), handle->data, total)) {
app/mt_boot/aee/kdump_ext4.c:		if (!handle->dumpdev->write(handle->dumpdev, ext4_lba_to_block_offset(handle->wlba), handle->data, handle->midx)) {
app/mt_boot/aee/kdump_ext4.c:	voprintf_info("Output to EXT4 Partition %s\n", mrdump_dev->name);
app/mt_boot/aee/kdump_ext4.c:	if (!mrdump_dev->read(mrdump_dev, ext4_lba_to_block_offset(mrdump_cb->output_fs_lbaooo), (uint8_t *)InfoLBA, sizeof(InfoLBA))) {
app/mt_boot/aee/kdump_ext4.c:	if (!handle->dumpdev->write(handle->dumpdev, ext4_lba_to_block_offset(paf_info_lba), (uint8_t *)InfoLBA, sizeof(InfoLBA))) {
app/mt_boot/aee/kdump_ext4.c:	if (!handle->dumpdev->read(handle->dumpdev, ext4_lba_to_block_offset(handle->rlba), (uint8_t *)handle->block_lba, BLKSIZE)) {
app/mt_boot/aee/kdump_ext4.c:	if (!handle->dumpdev->write(handle->dumpdev, ext4_lba_to_block_offset(paf_info_lba), (uint8_t *)InfoLBA, sizeof(InfoLBA))) {
app/mt_boot/blockheader.c:	if (dev->blkdev->type == BOOTDEV_SDMMC) {
app/mt_boot/blockheader.c:	} else if (dev->blkdev->type == BOOTDEV_UFS) {
app/mt_boot/blockheader.c:	if (dev->blkdev->type == BOOTDEV_UFS)
app/mt_boot/blockheader.c:	if (dev->blkdev->type == BOOTDEV_SDMMC)
app/mt_boot/blockheader.c:	else if (dev->blkdev->type == BOOTDEV_UFS)
app/mt_boot/blockheader.c:	if (dev->blkdev->type == BOOTDEV_SDMMC)
app/mt_boot/blockheader.c:	else if (dev->blkdev->type == BOOTDEV_UFS)
lib/lvgl/src/lv_core/lv_obj.c:        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
lib/lvgl/src/lv_core/lv_obj.c:        if(indev->proc.types.pointer.last_pressed == obj) {
lib/lvgl/src/lv_core/lv_obj.c:            indev->proc.types.pointer.last_pressed = NULL;
lib/lvgl/src/lv_core/lv_obj.c:        if(indev->group == group && obj == lv_indev_get_obj_act()) {
lib/lvgl/src/lv_core/lv_indev.c:    return indev->driver.type;
lib/lvgl/src/lv_core/lv_indev.c:        indev->proc.reset_query = 1;
lib/lvgl/src/lv_core/lv_indev.c:        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
lib/lvgl/src/lv_core/lv_indev.c:            indev->proc.types.pointer.last_pressed = NULL;
lib/lvgl/src/lv_core/lv_indev.c:    indev->proc.long_pr_sent         = 0;
lib/lvgl/src/lv_core/lv_indev.c:    indev->proc.longpr_rep_timestamp = lv_tick_get();
lib/lvgl/src/lv_core/lv_indev.c:    indev->proc.pr_timestamp         = lv_tick_get();
lib/lvgl/src/lv_core/lv_indev.c:    indev->proc.disabled = en ? 0 : 1;
lib/lvgl/src/lv_core/lv_indev.c:    if(indev->driver.type != LV_INDEV_TYPE_POINTER) return;
lib/lvgl/src/lv_core/lv_indev.c:    indev->cursor = cur_obj;
lib/lvgl/src/lv_core/lv_indev.c:    lv_obj_set_parent(indev->cursor, lv_disp_get_layer_sys(indev->driver.disp));
lib/lvgl/src/lv_core/lv_indev.c:    lv_obj_set_pos(indev->cursor, indev->proc.types.pointer.act_point.x, indev->proc.types.pointer.act_point.y);
lib/lvgl/src/lv_core/lv_indev.c:    if(indev->driver.type == LV_INDEV_TYPE_KEYPAD || indev->driver.type == LV_INDEV_TYPE_ENCODER) {
lib/lvgl/src/lv_core/lv_indev.c:        indev->group = group;
lib/lvgl/src/lv_core/lv_indev.c:    if(indev->driver.type == LV_INDEV_TYPE_BUTTON) {
lib/lvgl/src/lv_core/lv_indev.c:        indev->btn_points = points;
lib/lvgl/src/lv_core/lv_indev.c:    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
lib/lvgl/src/lv_core/lv_indev.c:        point->x = indev->proc.types.pointer.act_point.x;
lib/lvgl/src/lv_core/lv_indev.c:        point->y = indev->proc.types.pointer.act_point.y;
lib/lvgl/src/lv_core/lv_indev.c:    return indev->proc.types.pointer.gesture_dir;
lib/lvgl/src/lv_core/lv_indev.c:    if(indev->driver.type != LV_INDEV_TYPE_KEYPAD)
lib/lvgl/src/lv_core/lv_indev.c:        return indev->proc.types.keypad.last_key;
lib/lvgl/src/lv_core/lv_indev.c:    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
lib/lvgl/src/lv_core/lv_indev.c:    return indev->proc.types.pointer.drag_in_prog == 0 ? false : true;
lib/lvgl/src/lv_core/lv_indev.c:    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
lib/lvgl/src/lv_core/lv_indev.c:        point->x = indev->proc.types.pointer.vect.x;
lib/lvgl/src/lv_core/lv_indev.c:        point->y = indev->proc.types.pointer.vect.y;
lib/lvgl/src/lv_core/lv_indev.c:    if(indev->driver.type != LV_INDEV_TYPE_POINTER) return LV_RES_OK;
lib/lvgl/src/lv_core/lv_indev.c:    if(indev->proc.types.pointer.drag_in_prog == 0) return LV_RES_OK;
lib/lvgl/src/lv_core/lv_indev.c:    indev->proc.types.pointer.drag_in_prog = 0;
lib/lvgl/src/lv_core/lv_indev.c:    indev->proc.types.pointer.drag_throw_vect.x = 0;
lib/lvgl/src/lv_core/lv_indev.c:    indev->proc.types.pointer.drag_throw_vect.y = 0;
lib/lvgl/src/lv_core/lv_indev.c:    drag_obj = get_dragged_obj(indev->proc.types.pointer.act_obj);
lib/lvgl/src/lv_core/lv_indev.c:    indev->proc.wait_until_release = 1;
lib/lvgl/src/lv_core/lv_indev.c:    return indev->refr_task;
lib/lvgl/src/lv_core/lv_indev.c: * Process new points from a input device. indev->state.pressed has to be set
lib/lvgl/src/lv_core/lv_indev.c:    if(indev->proc.reset_query) {
lib/lvgl/src/lv_core/lv_indev.c:        indev->proc.types.pointer.act_obj           = NULL;
lib/lvgl/src/lv_core/lv_indev.c:        indev->proc.types.pointer.last_obj          = NULL;
lib/lvgl/src/lv_core/lv_indev.c:        indev->proc.types.pointer.drag_limit_out    = 0;
lib/lvgl/src/lv_core/lv_indev.c:        indev->proc.types.pointer.drag_in_prog      = 0;
lib/lvgl/src/lv_core/lv_indev.c:        indev->proc.long_pr_sent                    = 0;
lib/lvgl/src/lv_core/lv_indev.c:        indev->proc.pr_timestamp                    = 0;
lib/lvgl/src/lv_core/lv_indev.c:        indev->proc.longpr_rep_timestamp            = 0;
lib/lvgl/src/lv_core/lv_indev.c:        indev->proc.types.pointer.drag_sum.x        = 0;
lib/lvgl/src/lv_core/lv_indev.c:        indev->proc.types.pointer.drag_sum.y        = 0;
lib/lvgl/src/lv_core/lv_indev.c:        indev->proc.types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
lib/lvgl/src/lv_core/lv_indev.c:        indev->proc.types.pointer.drag_throw_vect.x = 0;
lib/lvgl/src/lv_core/lv_indev.c:        indev->proc.types.pointer.drag_throw_vect.y = 0;
lib/lvgl/src/lv_core/lv_indev.c:        indev->proc.types.pointer.gesture_sum.x     = 0;
lib/lvgl/src/lv_core/lv_indev.c:        indev->proc.types.pointer.gesture_sum.y     = 0;
lib/lvgl/src/lv_core/lv_indev.c:        indev->proc.reset_query                     = 0;
lib/lvgl/src/lv_hal/lv_hal_disp.c:        if(indev->driver.disp == disp) {
lib/lvgl/src/lv_hal/lv_hal_disp.c:            indev->driver.disp = NULL;
lib/lvgl/src/lv_hal/lv_hal_indev.c:    _lv_memcpy(&indev->driver, driver, sizeof(lv_indev_drv_t));
lib/lvgl/src/lv_hal/lv_hal_indev.c:    indev->proc.reset_query = 1;
lib/lvgl/src/lv_hal/lv_hal_indev.c:    indev->cursor           = NULL;
lib/lvgl/src/lv_hal/lv_hal_indev.c:    indev->group            = NULL;
lib/lvgl/src/lv_hal/lv_hal_indev.c:    indev->btn_points       = NULL;
lib/lvgl/src/lv_hal/lv_hal_indev.c:    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);
lib/lvgl/src/lv_hal/lv_hal_indev.c:    memcpy(&indev->driver, new_drv, sizeof(lv_indev_drv_t));
lib/lvgl/src/lv_hal/lv_hal_indev.c:    if(indev->driver.type == LV_INDEV_TYPE_POINTER) {
lib/lvgl/src/lv_hal/lv_hal_indev.c:        data->point.x = indev->proc.types.pointer.act_point.x;
lib/lvgl/src/lv_hal/lv_hal_indev.c:        data->point.y = indev->proc.types.pointer.act_point.y;
lib/lvgl/src/lv_hal/lv_hal_indev.c:    else if(indev->driver.type == LV_INDEV_TYPE_KEYPAD) {
lib/lvgl/src/lv_hal/lv_hal_indev.c:        data->key = indev->proc.types.keypad.last_key;
lib/lvgl/src/lv_hal/lv_hal_indev.c:    if(indev->driver.read_cb) {
lib/lvgl/src/lv_hal/lv_hal_indev.c:        cont = indev->driver.read_cb(&indev->driver, data);
lib/lvgl/src/lv_widgets/lv_tileview.c:            if(!ext->drag_top_en && y > -(ext->act_id.y * h) && indev->proc.types.pointer.vect.y > 0)  {
lib/lvgl/src/lv_widgets/lv_tileview.c:            if(!ext->drag_bottom_en && indev->proc.types.pointer.vect.y < 0 && y < -(ext->act_id.y * h)) {
lib/lvgl/src/lv_widgets/lv_tileview.c:            if(!ext->drag_left_en && x > -(ext->act_id.x * w) && indev->proc.types.pointer.vect.x > 0) {
lib/lvgl/src/lv_widgets/lv_tileview.c:            if(!ext->drag_right_en && indev->proc.types.pointer.vect.x < 0 && x < -(ext->act_id.x * w)) {
lib/lvgl/src/lv_widgets/lv_tileview.c:            lv_drag_dir_t drag_dir = indev->proc.types.pointer.drag_dir;
lib/lvgl/src/lv_widgets/lv_tileview.c:    lv_drag_dir_t drag_dir = indev->proc.types.pointer.drag_dir;
lib/lvgl/src/lv_widgets/lv_page.c:            lv_point_t * drag_sum = &indev->proc.types.pointer.drag_sum;
lib/lvgl/src/lv_widgets/lv_cpicker.c:        if((LV_MATH_ABS(p.x - ext->last_press_point.x) > indev->driver.drag_limit / 2) ||
lib/lvgl/src/lv_widgets/lv_cpicker.c:           (LV_MATH_ABS(p.y - ext->last_press_point.y) > indev->driver.drag_limit / 2)) {
lib/lvgl/src/lv_widgets/lv_cpicker.c:            if(diff > (uint32_t)indev->driver.long_press_time * 2 && !ext->color_mode_fixed) {
lib/lvgl/src/lv_widgets/lv_cpicker.c:            if(!on_ring && diff > indev->driver.long_press_time && !ext->color_mode_fixed) {
lib/lvgl/src/lv_widgets/lv_cpicker.c:    if(lv_tick_elaps(ext->last_click_time) < indev->driver.long_press_time) {
lib/lvgl/src/lv_widgets/lv_list.c:                    if(indev->proc.long_pr_sent == 0) {
lib/bio/mem.c:	LTRACEF("bdev %s, buf %p, offset %lld, len %zu\n", bdev->name, buf, offset, len);
lib/bio/mem.c:	LTRACEF("bdev %s, buf %p, block %u, count %u\n", bdev->name, buf, block, count);
lib/bio/mem.c:	LTRACEF("bdev %s, buf %p, offset %lld, len %zu\n", bdev->name, buf, offset, len);
lib/bio/mem.c:	LTRACEF("bdev %s, buf %p, block %u, count %u\n", bdev->name, buf, block, count);
lib/bio/bio.c:	STACKBUF_DMA_ALIGN(temp, dev->block_size); // temporary buffer for partial block transfers
lib/bio/bio.c:	block = offset / dev->block_size;
lib/bio/bio.c:	if ((offset % dev->block_size) != 0) {
lib/bio/bio.c:		size_t block_offset = offset % dev->block_size;
lib/bio/bio.c:		size_t tocopy = MIN(dev->block_size - block_offset, len);
lib/bio/bio.c:	if (len >= dev->block_size) {
lib/bio/bio.c:		size_t block_count = len / dev->block_size;
lib/bio/bio.c:		size_t bytes = block_count * dev->block_size;
lib/bio/bio.c:	STACKBUF_DMA_ALIGN(temp, dev->block_size); // temporary buffer for partial block transfers
lib/bio/bio.c:	block = offset / dev->block_size;
lib/bio/bio.c:	if ((offset % dev->block_size) != 0) {
lib/bio/bio.c:		size_t block_offset = offset % dev->block_size;
lib/bio/bio.c:		size_t tocopy = MIN(dev->block_size - block_offset, len);
lib/bio/bio.c:	if (len >= dev->block_size) {
lib/bio/bio.c:		size_t block_count = len / dev->block_size;
lib/bio/bio.c:		size_t bytes = block_count * dev->block_size;
lib/bio/bio.c:	atomic_add(&dev->ref, 1);
lib/bio/bio.c:	int oldval = atomic_add(&dev->ref, -1);
lib/bio/bio.c:		DEBUG_ASSERT(!list_in_list(&dev->node));
lib/bio/bio.c:		TRACEF("last ref, removing (%s)\n", dev->name);
lib/bio/bio.c:		if (dev->close)
lib/bio/bio.c:			dev->close(dev);
lib/bio/bio.c:		free(dev->name);
lib/bio/bio.c:	DEBUG_ASSERT(dev->ref > 0);
lib/bio/bio.c:	if (offset >= dev->size)
lib/bio/bio.c:	if (offset + len > dev->size)
lib/bio/bio.c:		len = dev->size - offset;
lib/bio/bio.c:    video_printf("bio read dev '%s', buf %p, offset %lld, len %zd\n", dev->name, buf, offset, len);
lib/bio/bio.c:	return dev->read(dev, buf, offset, len);
lib/bio/bio.c:	video_printf("read blockdev '%s', buf %p, block %d, count %u\n", dev->name, buf, block, count);
lib/bio/bio.c:	DEBUG_ASSERT(dev->ref > 0);
lib/bio/bio.c:	if (block > dev->block_count)
lib/bio/bio.c:	if (block + count > dev->block_count)
lib/bio/bio.c:		count = dev->block_count - block;
lib/bio/bio.c:	return dev->read_block(dev, buf, block, count);
lib/bio/bio.c:	video_printf("dev '%s', buf %p, offset %lld, len %zd\n", dev->name, buf, offset, len);
lib/bio/bio.c:	DEBUG_ASSERT(dev->ref > 0);
lib/bio/bio.c:	if (offset >= dev->size)
lib/bio/bio.c:	if (offset + len > dev->size)
lib/bio/bio.c:		len = dev->size - offset;
lib/bio/bio.c:	return dev->write(dev, buf, offset, len);
lib/bio/bio.c:	video_printf("dev '%s', buf %p, block %d, count %u\n", dev->name, buf, block, count);
lib/bio/bio.c:	DEBUG_ASSERT(dev->ref > 0);
lib/bio/bio.c:	if (block > dev->block_count)
lib/bio/bio.c:	if (block + count > dev->block_count)
lib/bio/bio.c:		count = dev->block_count - block;
lib/bio/bio.c:	return dev->write_block(dev, buf, block, count);
lib/bio/bio.c:	video_printf("dev '%s', offset %lld, len %zd\n", dev->name, offset, len);
lib/bio/bio.c:	DEBUG_ASSERT(dev->ref > 0);
lib/bio/bio.c:	if (offset >= dev->size)
lib/bio/bio.c:	if (offset + len > dev->size)
lib/bio/bio.c:		len = dev->size - offset;
lib/bio/bio.c:	return dev->erase(dev, offset, len);
lib/bio/bio.c:	video_printf("dev '%s', request %08x, argp %p\n", dev->name, request, argp);
lib/bio/bio.c:	if (dev->ioctl == NULL) {
lib/bio/bio.c:		return dev->ioctl(dev, request, argp);
lib/bio/bio.c:	list_clear_node(&dev->node);
lib/bio/bio.c:	dev->name = strdup(name);
lib/bio/bio.c:	dev->block_size = block_size;
lib/bio/bio.c:	dev->block_count = block_count;
lib/bio/bio.c:	dev->size = (off_t)block_count * block_size;
lib/bio/bio.c:	dev->ref = 0;
lib/bio/bio.c:	dev->label = NULL;
lib/bio/bio.c:	dev->is_gpt = false;
lib/bio/bio.c:	dev->is_subdev = false;
lib/bio/bio.c:	dev->read = bio_default_read;
lib/bio/bio.c:	dev->read_block = bio_default_read_block;
lib/bio/bio.c:	dev->write = bio_default_write;
lib/bio/bio.c:	dev->write_block = bio_default_write_block;
lib/bio/bio.c:	dev->erase = bio_default_erase;
lib/bio/bio.c:	dev->close = NULL;
lib/bio/bio.c:	video_printf(" '%s'\n", dev->name);
lib/bio/bio.c:	list_add_head(&bdevs->list, &dev->node);
lib/bio/bio.c:	video_printf(" '%s'\n", dev->name);
lib/bio/bio.c:	list_delete(&dev->node);
lib/bio/subdev.c:	return bio_read(subdev->parent, buf, offset + subdev->offset * subdev->dev.block_size, len);
lib/bio/subdev.c:	return bio_read_block(subdev->parent, buf, block + subdev->offset, count);
lib/bio/subdev.c:	return bio_write(subdev->parent, buf, offset + subdev->offset * subdev->dev.block_size, len);
lib/bio/subdev.c:	return bio_write_block(subdev->parent, buf, block + subdev->offset, count);
lib/bio/subdev.c:	return bio_erase(subdev->parent, offset + subdev->offset * subdev->dev.block_size, len);
lib/bio/subdev.c:	bio_close(subdev->parent);
lib/bio/subdev.c:	subdev->parent = NULL;
lib/partition/partition.c:	if (part->lba_start >= dev->block_count)
lib/partition/partition.c:	if ((part->lba_start + part->lba_length) > dev->block_count)
lib/partition/partition.c:	STACKBUF_DMA_ALIGN(buf, dev->block_size);
lib/partition/partition.c:		err = bio_read(dev, buf, offset + dev->block_size, dev->block_size);
lib/partition/partition.c:			uint64_t backup_header_lba = dev->block_count - 1;
lib/partition/partition.c:			err = bio_read(dev, buf, (backup_header_lba * dev->block_size), dev->block_size);
lib/partition/partition.c:		uint32_t part_entry_cnt = dev->block_size / ENTRY_SIZE;
lib/partition/partition.c:			err = bio_read(dev, buf, offset + (partition_0 * dev->block_size) + (i * dev->block_size),
lib/partition/partition.c:							dev->block_size);
lib/partition/partition.c:				partdev->label = strdup((char*)name);
lib/partition/partition.c:				partdev->is_gpt = true;
